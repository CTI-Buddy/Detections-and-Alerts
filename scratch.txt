# DE-HY25.08 Federation Trust Abuse Detection (Golden SAML Prevention)
id: DE-HY25.08
title: Federation Trust Abuse Detection (Golden SAML Prevention)
description: |
  Detects unauthorized creation or modification of cloud identity federation settings (e.g., new domains, 
  certificate uploads, issuer changes) indicative of Golden SAML persistence
severity: High
status: draft
author: \m/
date_created: 2025-10-16
date_modified: 2025-10-16
tags:
  - clarifi_path: Identity/Azure-AD/Persistence
  - tactic: Defense Evasion
  - tactic: Persistence
  - technique: Forge Web Credentials: SAML Tokens
  - technique: Domain Trust Modification
  - ATT&CK_ID: T1606.002 # Forge Web Credentials: SAML Tokens
  - ATT&CK_ID: T1484.002 # Domain Trust Modification
  - method: Threshold/Context-Aware
  - method: Behavioral/Model-Classification
  - core_indicator: Event_FederationChange
  - core_indicator: Event_GoldenSAML
  - core_indicator: Event_PrivUsage
  - datasource: AuditLogs

logic:
  query: |

// Enhanced Federation Trust Abuse Detection (Golden SAML Prevention)
// Detects unauthorized federation domain additions and certificate manipulation

// Parameters
let LookbackWindow = 7d;
let BaselineWindow = 90d;  // Long baseline for rare operations - play around with it

// Approved federation configuration (CUSTOMIZE FOR ENVIRONMENT)
let ApprovedFederationDomains = dynamic([
    "contoso.com", 
    "fabrikam.com"
]); 

// This is key - must have approved service principals.
let ApprovedInitiators = dynamic([
    "admin@contoso.com",
    "identity-admin@contoso.com",
    "system_automation@contoso.com"
]);

// High-privilege identity roles that should be monitored
let HighPrivilegeRoles = dynamic([
    "Global Administrator",
    "Privileged Role Administrator", 
    "Security Administrator",
    "Hybrid Identity Administrator"
]);

// Federation-related operations categorized by risk
let CriticalFederationOps = dynamic([
    "Add federated domain",
    "Set domain authentication",
    "Add service principal credentials",  // Certificate upload
    "Update application â€“ Certificates and secrets management"
]);

let HighRiskFederationOps = dynamic([
    "Update domain federation settings",
    "Update federation settings on domain",
    "Update domain",
    "Set federation settings on domain"
]);

let MediumRiskFederationOps = dynamic([
    "Add new domain",
    "Update domain authentication",
    "Add unverified domain"
]);

// Get historical baseline for federation operations
let FederationBaseline =
    AuditLogs
    | where TimeGenerated between (ago(BaselineWindow) .. ago(LookbackWindow))
    | where OperationName has_any (CriticalFederationOps) 
        or OperationName has_any (HighRiskFederationOps)
        or OperationName has_any (MediumRiskFederationOps)
    | summarize 
        HistoricalCount = count(),
        LastSeenBefore = max(TimeGenerated),
        HistoricalInitiators = make_set(tostring(InitiatedBy.user.userPrincipalName))
    by OperationName;

// Main Detection Query
let FederationChanges = AuditLogs
| where TimeGenerated >= ago(LookbackWindow)
| where OperationName has_any (CriticalFederationOps)
    or OperationName has_any (HighRiskFederationOps) 
    or OperationName has_any (MediumRiskFederationOps)
| extend
    // Properly parse InitiatedBy
    Initiator = tostring(InitiatedBy.user.userPrincipalName),
    InitiatorIP = tostring(InitiatedBy.user.ipAddress),
    InitiatorApp = tostring(InitiatedBy.app.displayName),
    
    // Parse TargetResources (array of objects)
    TargetResourcesParsed = parse_json(TargetResources),
    
    // Parse AdditionalDetails
    AdditionalDetailsParsed = parse_json(AdditionalDetails)

| extend
    // Extract target domain information
    TargetDomain = tostring(TargetResourcesParsed[0].displayName),
    TargetType = tostring(TargetResourcesParsed[0].type),
    TargetId = tostring(TargetResourcesParsed[0].id),
    
    // Extract modified properties (complex nested structure)
    ModifiedProperties = TargetResourcesParsed[0].modifiedProperties

| extend
    // Parse modified properties for federation-specific changes
    ModifiedPropertiesParsed = parse_json(ModifiedProperties)

| mv-expand ModifiedPropertiesParsed
| extend
    PropertyName = tostring(ModifiedPropertiesParsed.displayName),
    OldValue = tostring(ModifiedPropertiesParsed.oldValue),
    NewValue = tostring(ModifiedPropertiesParsed.newValue)

// Aggregate modifications per event
| summarize
    ModifiedPropertyNames = make_set(PropertyName),
    ModifiedPropertyDetails = make_list(pack(
        "Property", PropertyName,
        "OldValue", OldValue,
        "NewValue", NewValue
    )),
    FirstModification = min(TimeGenerated)
by TimeGenerated, OperationName, Initiator, InitiatorIP, InitiatorApp, 
   TargetDomain, TargetType, TargetId, CorrelationId, Result

| where isnotempty(Initiator) or isnotempty(InitiatorApp)

// Enrich with context
| extend
    // Classification flags
    IsApprovedInitiator = Initiator in (ApprovedInitiators),
    IsApprovedDomain = TargetDomain in (ApprovedFederationDomains),
    
    // Operation risk classification
    IsCriticalOp = OperationName in (CriticalFederationOps),
    IsHighRiskOp = OperationName in (HighRiskFederationOps),
    
    // Detect specific malicious indicators
    IsCertificateChange = ModifiedPropertyNames has_any ("Certificate", "SigningCertificate", "KeyCredential", "Thumbprint"),
    IsIssuerChange = ModifiedPropertyNames has_any ("IssuerUri", "FederationSettings", "PassiveSignInUri", "MetadataExchangeUri"),
    IsAuthTypeChange = ModifiedPropertyNames has "Authentication",
    IsNewDomainAddition = OperationName == "Add federated domain" or OperationName == "Add new domain",
    
    // Network risk indicators
    IsExternalIP = not(ipv4_is_private(InitiatorIP)) and InitiatorIP != "",
    
    // Check if operation succeeded
    IsSuccessful = Result =~ "success" or Result =~ "Success";

// Join with baseline to detect anomalies
FederationChanges
| join kind=leftouter (FederationBaseline) on OperationName
| extend
    IsNewOperation = isnull(HistoricalCount) or HistoricalCount == 0,
    IsNewInitiator = not(HistoricalInitiators has Initiator),
    DaysSinceLastSeen = datetime_diff('day', TimeGenerated, LastSeenBefore);

// Risk Scoring Engine
FederationChanges
| extend
    // Base operation risk
    OperationRisk = case(
        IsCriticalOp, 50,
        IsHighRiskOp, 35,
        25
    ),
    
    // Initiator risk
    InitiatorRisk = case(
        not(IsApprovedInitiator) and isnull(Initiator), 30,  // Service principal/app
        not(IsApprovedInitiator), 25,                         // Unknown user
        IsNewInitiator, 15,                                   // First time for this op
        5
    ),
    
    // Target risk
    TargetRisk = case(
        not(IsApprovedDomain) and IsNewDomainAddition, 20,  // New external domain
        not(IsApprovedDomain), 15,                          // External domain modification
        5
    ),
    
    // Technical indicators risk
    TechnicalRisk = case(
        IsCertificateChange and IsIssuerChange, 25,  // Both changed (Golden SAML setup)
        IsCertificateChange, 20,                     // Cert manipulation
        IsIssuerChange, 18,                          // Issuer manipulation
        IsAuthTypeChange, 15,                        // Auth type change
        5
    ),
    
    // Behavioral anomalies
    BehavioralRisk = case(
        IsNewOperation, 10,       // Never seen before
        DaysSinceLastSeen > 180, 8,  // Haven't seen in 6 months
        DaysSinceLastSeen > 90, 5,   // Haven't seen in 3 months
        0
    ),
    
    TotalRiskScore = OperationRisk + InitiatorRisk + TargetRisk + TechnicalRisk + BehavioralRisk

| extend
    AlertSeverity = case(
        TotalRiskScore >= 90, "Critical",
        TotalRiskScore >= 70, "High",
        TotalRiskScore >= 50, "Medium",
        "Low"
    )

// Filter to actionable alerts
| where AlertSeverity in ("Critical", "High", "Medium")
| where IsSuccessful == true  // Only alert on successful changes

// Prepare evidence package
| extend
    Evidence = pack(
        "OperationName", OperationName,
        "TargetDomain", TargetDomain,
        "ModifiedProperties", ModifiedPropertyNames,
        "ModificationDetails", ModifiedPropertyDetails,
        "InitiatorIP", InitiatorIP,
        "InitiatorApp", InitiatorApp,
        "IsApprovedInitiator", IsApprovedInitiator,
        "IsApprovedDomain", IsApprovedDomain,
        "CertificateChanged", IsCertificateChange,
        "IssuerChanged", IsIssuerChange,
        "CorrelationId", CorrelationId
    ),
    
    ThreatContext = pack(
        "AttackType", case(
            IsCertificateChange and IsIssuerChange, "Potential Golden SAML Attack",
            IsNewDomainAddition and not(IsApprovedDomain), "Unauthorized Federation Trust",
            IsCertificateChange, "Federation Certificate Manipulation",
            IsIssuerChange, "Federation Issuer Manipulation",
            "Federation Configuration Change"
        ),
        "RiskFactors", strcat_array(
            dynamic([
                iff(not(IsApprovedInitiator), "Unapproved Initiator", ""),
                iff(not(IsApprovedDomain), "Unapproved Domain", ""),
                iff(IsCertificateChange, "Certificate Change", ""),
                iff(IsIssuerChange, "Issuer Change", ""),
                iff(IsNewOperation, "First Time Operation", "")
            ]) | where strlen(tostring($0)) > 0,
            ", "
        )
    ),
    
    Recommendations = case(
        AlertSeverity == "Critical",
        "IMMEDIATE P0 RESPONSE: 1) Disable initiating account 2) Review ALL federation settings and certificates 3) Check for unauthorized SAML token issuance 4) Validate all federated domains 5) Review sign-in logs for suspicious federated authentications 6) Engage incident response team - potential Golden SAML attack",
        AlertSeverity == "High",
        "URGENT: 1) Verify initiator authorization 2) Review federation configuration changes 3) Validate certificates and issuer URIs 4) Check recent federated sign-ins 5) Contact initiator to confirm legitimate action",
        "INVESTIGATE: 1) Confirm business justification 2) Validate change was authorized 3) Document for baseline improvement"
    ),
    
    DetectedTechniques = "T1484.002 (Domain Trust Modification), T1556.007 (Modify Authentication Process: Hybrid Identity), T1606.002 (Forge Web Credentials: SAML Tokens)"

// Final output
| project
    TimeGenerated,
    AlertSeverity,
    TotalRiskScore,
    OperationName,
    Initiator,
    InitiatorIP,
    InitiatorApp,
    TargetDomain,
    ThreatContext,
    Evidence,
    DetectedTechniques,
    Recommendations,
    CorrelationId

| sort by TotalRiskScore desc, TimeGenerated desc

time_window: 7d
frequency: 24h
trigger: results > 0

fields_returned:
  - AlertSeverity
  - TotalRiskScore
  - OperationName
  - Initiator
  - InitiatorIP
  - InitiatorApp
  - TargetDomain
  - ThreatContext
  - Evidence
  - DetectedTechniques
  - Recommendations
  - CorrelationId

references:
  - https://attack.mitre.org/techniques/T1606/002/
  - https://attack.mitre.org/techniques/T1484/002/ 
  - https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps
  - https://www.sygnia.co/threat-reports-and-advisories/golden-saml-attack/
  - https://www.hunters.security/en/blog/adfs-threat-hunting-2-golden-saml

triage: |
  This alert means an attacker may have established a global, stealthy backdoor (Golden SAML attack). Speed is paramount.
  1.	Immediate Containment & Privilege Revocation:
    o	Disable Initiator: Immediately disable the Initiator account (Initiator@domain.com) to prevent further tenant configuration changes. This credential is confirmed compromised.
    o	Revoke Sessions: Force a password reset and immediately revoke all active sessions and refresh tokens for the initiating user.
  2.	Federation Configuration Verification (The Reversion):
    o	Check Federation Settings: Navigate directly to the federation settings for the TargetDomain.
    o	Scrutinize Changes: Focus on the specific properties listed in the Evidence (e.g., IssuerUri, SigningCertificate).
    o	Revert Unauthorized Changes: Immediately revert or delete any unauthorized or suspicious IssuerUri or SigningCertificate. If an unauthorized domain was added, delete it. If unsure, take screenshots first, but prioritize reverting the change to block the attack vector.
  3.	Authentication/Token Scoping:
    o	Check Federated Sign-ins: Search the sign-in logs for federated sign-ins that occurred after the suspicious change time (TimeGenerated). Look for authentication events matching the suspicious TargetDomain or any unexpected IP addresses/locations, as these could be tokens forged by the attacker.
    o	Token Invalidation: If possible, execute a global token invalidation to force all users to re-authenticate, which mitigates the use of any forged SAML tokens created before the reversion.
  4.	Forensic and Scoping Analysis:
    o	Source IP: Analyze the InitiatorIP for known malicious or foreign origins.
    o	Identify Origin: If the initiator was a Service Principal/App (InitiatorApp), determine which system or function executed the command and review that system's logs for compromise.
    o	Escalate: Immediately escalate to the Incident Response (IR) team, clearly stating that a potential Golden SAML persistence mechanism was detected and largely contained by reversion.



notes: |

