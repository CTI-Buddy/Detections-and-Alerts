# DE-HY25.13 Suspicious Script Interpreter Execution Detection 
id: DE-HY25.13
title: Suspicious Script Interpreter Execution Detection 
description: |
  Detects suspicious execution of non-native script interpreters (Python, Node.js, Perl) 
  originating from non-standard paths, using evasion techniques, or correlating with immediate 
  C2/reconnaissance activity.
severity: High
status: draft
author: \m/
date_created: 2025-10-21
date_modified: 2025-10-21
tags:
  - clarifi_path: Endpoint/Windows/Execution
  - tactic: Execution
  - technique: Command & Scripting Interpreter
  - technique: Command & Scripting Interpreter: Python
  - technique: Command & Scripting Interpreter: Node.js/JavaScript
  - ATT&CK_ID: T1059 # Command & Scripting Interpreter
  - ATT&CK_ID: T1059.006 # Command & Scripting Interpreter: Python
  - ATT&CK_ID: T1059.007 # Command & Scripting Interpreter: Node.js/JavaScript
  - method: Correlation/Sequence
  - method: Signature/String-Match
  - core_indicator: Event_ScriptInterpreter
  - core_indicator: Net_C2Traffic
  - core_indicator: File_SuspiciousPath
  - datasource: DeviceProcessEvents
  - datasource: DeviceFileEvents
  - datasource: DeviceNetworkEvents


logic:
  query: |

// Execution: Suspicious Script Interpreter Execution Detection 
// Detects malicious use of scripting language interpreters (Python, Node.js, Perl, Ruby, PHP)

// Configuration
let LookbackWindow = 7d;
let FileCreationWindow = 10m; // Recently dropped scripts
let NetworkCorrelationWindow = 5m; // Network activity within this window

// Script Interpreters
let ScriptInterpreters = dynamic([
    "python.exe", "pythonw.exe", "py.exe", "python3.exe",
    "perl.exe", "ruby.exe", "node.exe", "npm.exe", 
    "php.exe", "php-cgi.exe"
]);

// Legitimate installation paths (customize - this might get wonky in virtual envs)
let LegitimateInterpreterPaths = dynamic([
    "\\python\\", "\\python3", "\\python27\\", "\\python38\\", "\\python39\\", "\\python310\\",
    "\\program files\\python", "\\program files (x86)\\python",
    "\\program files\\nodejs\\", "\\program files (x86)\\nodejs\\",
    "\\program files\\ruby\\", "\\program files (x86)\\ruby\\",
    "\\program files\\perl\\", "\\programfiles\\strawberry\\perl\\",
    "\\anaconda", "\\miniconda",
    "\\microsoft visual studio\\", "\\visual studio code\\",
    "\\pycharm\\", "\\jetbrains\\"
]);

// Legitimate service/automation accounts (customize this!!!!!)
let LegitimateServiceAccounts = dynamic([
    "jenkins", "bamboo", "teamcity", "gitlab-runner",
    "ansible", "puppet", "chef", "octopus"
    // Add your automation/build accounts
]);

// Suspicious execution paths
let SuspiciousPaths = dynamic([
    "\\temp\\", "\\tmp\\", "\\appdata\\local\\temp\\",
    "\\appdata\\roaming\\", "\\programdata\\",
    "\\public\\", "\\users\\public\\", "\\downloads\\",
    "\\perflogs\\", "\\windows\\temp\\", "\\windows\\tasks\\",
    "\\$recycle.bin\\", "\\inetpub\\", "\\wwwroot\\",
    "\\desktop\\", "\\documents\\", "\\music\\", "\\pictures\\", "\\videos\\"
]);

// High-confidence malicious patterns
let HighConfidenceMaliciousPatterns = dynamic([
    "import socket;", "import subprocess;", "import os;exec(",
    "eval(compile(", "exec(compile(", "__import__('os')",
    "pty.spawn", "SocketServer", "SimpleHTTPServer",
    "reverse_tcp", "reverse_shell", "meterpreter", 
    "shellcode", "payload", "exploit",
    "CreateThread", "VirtualAlloc", "WriteProcessMemory",
    "Invoke-Shellcode", "Invoke-Mimikatz", "powercat",
    "Net.WebClient", "DownloadString", "DownloadFile",
    "IEX(", "IEX (", "iex(", "iex ("
]);

// Suspicious but context-dependent patterns
let SuspiciousPatterns = dynamic([
    "-c ", "--command", "-e ", "--eval",
    "exec(", "eval(", "compile(",
    "base64.b64decode", "base64.decode", "binascii",
    "urllib.request", "urllib2", "requests.get", "httplib",
    "socket.socket", "socket.connect", "bind_tcp",
    "subprocess.Popen", "subprocess.call", "os.system",
    "CreateProcess", "WScript.Shell", "cmd.exe /c"
]);

// Suspicious imports/modules
let SuspiciousModules = dynamic([
    "ctypes", "pty", "tty", "msvcrt", "win32api", "win32con",
    "pycryptodome", "cryptography.hazmat", "scapy"
]);

// --- Module 1: Script Interpreter Execution Analysis ---
let InterpreterExecution = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName has_any (ScriptInterpreters)
| extend
    AttackerAccount = AccountName,
    InterpreterName = FileName,
    CommandLine = ProcessCommandLine,
    ParentProcess = InitiatingProcessFileName,
    ParentCommandLine = InitiatingProcessCommandLine,
    ProcessPath = tolower(FolderPath),
    ParentPath = tolower(InitiatingProcessFolderPath)
// Exclude legitimate service accounts
| where AttackerAccount !has_any (LegitimateServiceAccounts)
// Exclude standard installation paths (but keep suspicious ones)
| extend IsStandardPath = ProcessPath has_any (LegitimateInterpreterPaths)
| extend
    IsFromSuspiciousPath = ProcessPath has_any (SuspiciousPaths),
    HasHighConfidenceMalicious = CommandLine has_any (HighConfidenceMaliciousPatterns),
    HasSuspiciousPattern = CommandLine has_any (SuspiciousPatterns),
    HasSuspiciousModule = CommandLine has_any (SuspiciousModules)
| extend
    // Parse command-line execution flags
    HasInlineExecution = CommandLine has_any ("-c ", "--command", "-e ", "--eval", "/c ", "/e "),
    HasBase64 = CommandLine has_any ("base64", "b64decode", "frombase64"),
    HasNetworkIndicators = CommandLine has_any ("socket", "urllib", "requests", "http://", "https://", "ftp://", "tcp://"),
    HasProcessCreation = CommandLine has_any ("subprocess", "Popen", "system(", "exec(", "CreateProcess", "WScript.Shell"),
    HasFileOperations = CommandLine has_any ("open(", "read(", "write(", "os.remove", "shutil.rmtree")
| extend
    // Command line characteristics
    CommandLength = strlen(CommandLine),
    IsLongCommand = CommandLength > 500,
    IsVeryLongCommand = CommandLength > 2000,
    HasEncodedContent = CommandLine matches regex @"[A-Za-z0-9+/]{50,}={0,2}",
    HasObfuscation = CommandLine has_any ("^", "^^", "chr(", "ord(", "\\x", "\\u", "%")
| extend
    // Parent process analysis
    IsSuspiciousParent = ParentProcess in~ (
        "winword.exe", "excel.exe", "powerpnt.exe", "outlook.exe",
        "acrord32.exe", "acrobat.exe", "foxit reader.exe",
        "chrome.exe", "msedge.exe", "iexplore.exe", "firefox.exe",
        "wscript.exe", "cscript.exe", "mshta.exe", "hta.exe",
        "regsvr32.exe", "rundll32.exe", "odbcconf.exe"
    ),
    ParentIsCmdOrPowerShell = ParentProcess in~ ("cmd.exe", "powershell.exe", "pwsh.exe"),
    ParentFromSuspiciousPath = ParentPath has_any (SuspiciousPaths)
| extend
    // User profile analysis
    IsSystemAccount = AttackerAccount endswith "$",
    IsAdminAccount = AttackerAccount has_any ("admin", "administrator"),
    IsServiceAccount = AttackerAccount has_any ("service", "svc", "system")
| project TimeGenerated, DeviceName, AttackerAccount, InterpreterName, ProcessPath, CommandLine,
          ParentProcess, ParentCommandLine, ParentPath, SHA256, ProcessId,
          IsStandardPath, IsFromSuspiciousPath, HasHighConfidenceMalicious, HasSuspiciousPattern,
          HasSuspiciousModule, HasInlineExecution, HasBase64, HasNetworkIndicators,
          HasProcessCreation, HasFileOperations, CommandLength, IsLongCommand, IsVeryLongCommand,
          HasEncodedContent, HasObfuscation, IsSuspiciousParent, ParentIsCmdOrPowerShell,
          ParentFromSuspiciousPath, IsSystemAccount, IsAdminAccount, IsServiceAccount;

// --- Module 2: Script File Creation + Execution Correlation ---
let RecentScriptFiles = DeviceFileEvents
| where TimeGenerated >= ago(LookbackWindow)
| where ActionType in ("FileCreated", "FileModified")
| where FileName endswith ".py" or FileName endswith ".pl" or FileName endswith ".rb" 
    or FileName endswith ".js" or FileName endswith ".php" or FileName endswith ".pyw"
| extend FilePath = tolower(FolderPath)
| where FilePath has_any (SuspiciousPaths)
| extend
    ScriptFileName = FileName,
    ScriptCreationTime = TimeGenerated,
    ScriptCreator = InitiatingProcessFileName,
    ScriptCreatorAccount = AccountName
| project ScriptCreationTime, DeviceName, ScriptFileName, ScriptFilePath = FolderPath,
          ScriptCreator, ScriptCreatorAccount, ScriptSHA256 = SHA256;

let ScriptCreationExecution = InterpreterExecution
| join kind=inner (RecentScriptFiles) on DeviceName
| where CommandLine contains ScriptFileName
| where TimeGenerated between (ScriptCreationTime .. (ScriptCreationTime + FileCreationWindow))
| extend
    CreationToExecutionSeconds = datetime_diff('second', TimeGenerated, ScriptCreationTime),
    Signal = "Script_Drop_and_Execute"
| project TimeGenerated, DeviceName, AttackerAccount, InterpreterName, ProcessPath, CommandLine,
          ParentProcess, ScriptFileName, ScriptFilePath, ScriptCreator, CreationToExecutionSeconds,
          Signal, SHA256, HasHighConfidenceMalicious, HasSuspiciousPattern, IsFromSuspiciousPath;

// --- Module 3: Network Activity Correlation ---  VERY CUSTOMIZABLE - WE SHOULD FURTHER BUILD OUT (ESP WITH THREAT INTEL ENRICHMENT)
let InterpreterNetworkActivity = DeviceNetworkEvents
| where TimeGenerated >= ago(LookbackWindow)
| where InitiatingProcessFileName has_any (ScriptInterpreters)
| where RemoteIPType in ("Public", "Loopback") or RemotePort in (4444, 4445, 8080, 8443, 443, 80)
| extend
    NetworkTime = TimeGenerated,
    NetworkRemoteIP = RemoteIP,
    NetworkRemotePort = RemotePort,
    NetworkDirection = ActionType
| summarize
    NetworkConnections = count(),
    UniqueIPs = dcount(RemoteIP),
    RemoteIPs = make_set(RemoteIP, 10),
    RemotePorts = make_set(RemotePort),
    FirstNetworkActivity = min(TimeGenerated)
    by DeviceName, InitiatingProcessId, InitiatingProcessFileName;

let NetworkCorrelation = InterpreterExecution
| join kind=inner (InterpreterNetworkActivity) 
    on DeviceName, $left.ProcessId == $right.InitiatingProcessId
| where abs(datetime_diff('second', TimeGenerated, FirstNetworkActivity)) <= NetworkCorrelationWindow
| extend Signal = "Interpreter_with_Network_Activity"
| project TimeGenerated, DeviceName, AttackerAccount, InterpreterName, ProcessPath, CommandLine,
          ParentProcess, NetworkConnections, UniqueIPs, RemoteIPs, RemotePorts, Signal,
          HasHighConfidenceMalicious, HasSuspiciousPattern, IsFromSuspiciousPath;

// --- Module 4: Child Process Spawning ---
let InterpreterChildProcesses = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where InitiatingProcessFileName has_any (ScriptInterpreters)
| where FileName in~ (
    "cmd.exe", "powershell.exe", "net.exe", "net1.exe",
    "whoami.exe", "ipconfig.exe", "netstat.exe", "tasklist.exe",
    "reg.exe", "wmic.exe", "vssadmin.exe", "wevtutil.exe"
)
| summarize
    ChildProcesses = make_set(FileName),
    ChildProcessCount = dcount(FileName),
    ChildCommands = make_list(ProcessCommandLine, 20)
    by DeviceName, InitiatingProcessId, InitiatingProcessFileName, InitiatingProcessAccountName;

let ChildProcessCorrelation = InterpreterExecution
| join kind=inner (InterpreterChildProcesses)
    on DeviceName, $left.ProcessId == $right.InitiatingProcessId
| extend Signal = "Interpreter_Spawning_Suspicious_Children"
| project TimeGenerated, DeviceName, AttackerAccount, InterpreterName, ProcessPath, CommandLine,
          ParentProcess, ChildProcesses, ChildProcessCount, ChildCommands, Signal,
          HasHighConfidenceMalicious, HasSuspiciousPattern, IsFromSuspiciousPath;

// --- Consolidate All Detections ---
let StandaloneInterpreterAlerts = InterpreterExecution
| where HasHighConfidenceMalicious
    or (IsFromSuspiciousPath and not(IsStandardPath) and (HasSuspiciousPattern or HasInlineExecution))
    or (IsSuspiciousParent and HasSuspiciousPattern)
    or (IsVeryLongCommand and HasEncodedContent)
    or (HasBase64 and HasNetworkIndicators and HasInlineExecution)
| extend Signal = "Suspicious_Interpreter_Execution";

let AllDetections = union isfuzzy=true
    StandaloneInterpreterAlerts,
    ScriptCreationExecution,
    NetworkCorrelation,
    ChildProcessCorrelation
| extend
    HasHighConfidenceMalicious = coalesce(HasHighConfidenceMalicious, false),
    HasSuspiciousPattern = coalesce(HasSuspiciousPattern, false),
    IsFromSuspiciousPath = coalesce(IsFromSuspiciousPath, false),
    NetworkConnections = coalesce(NetworkConnections, 0),
    ChildProcessCount = coalesce(ChildProcessCount, 0);

// --- Risk Scoring ---
AllDetections
| extend
    BaseRisk = case(
        Signal == "Script_Drop_and_Execute", 85,
        Signal == "Interpreter_with_Network_Activity", 90,
        Signal == "Interpreter_Spawning_Suspicious_Children", 80,
        Signal == "Suspicious_Interpreter_Execution" and HasHighConfidenceMalicious, 95,
        Signal == "Suspicious_Interpreter_Execution", 70,
        60
    ),
    ContextBonus =
        iff(HasHighConfidenceMalicious, 20, 0)
        + iff(HasSuspiciousPattern and IsFromSuspiciousPath, 15, 0)
        + iff(IsSuspiciousParent, 15, 0)
        + iff(InterpreterName in~ ("perl.exe", "ruby.exe", "php.exe"), 10, 0)  // Less common = higher risk
        + iff(HasInlineExecution and HasBase64, 15, 0)
        + iff(HasEncodedContent, 10, 0)
        + iff(ParentFromSuspiciousPath, 10, 0)
        + iff(NetworkConnections > 0, 15, 0)
        + iff(ChildProcessCount >= 3, 15, 0)
        + iff(CreationToExecutionSeconds <= 60, 10, 0)  // Very quick execution after creation
        + iff(hourofday(TimeGenerated) >= 22 or hourofday(TimeGenerated) <= 6, 5, 0),  // Off-hours
    TotalRiskScore = BaseRisk + ContextBonus
| extend
    AlertSeverity = case(
        TotalRiskScore >= 90, "Critical",
        TotalRiskScore >= 75, "High",
        TotalRiskScore >= 60, "Medium",
        "Low"
    )
| where AlertSeverity in ("Critical", "High", "Medium")
| extend
    Evidence = bag_pack(
        "Signal", Signal,
        "InterpreterPath", ProcessPath,
        "CommandLine", CommandLine,
        "ParentProcess", ParentProcess,
        "ParentCommandLine", ParentCommandLine,
        "HasHighConfidenceMalicious", HasHighConfidenceMalicious,
        "HasSuspiciousPattern", HasSuspiciousPattern,
        "IsFromSuspiciousPath", IsFromSuspiciousPath,
        "NetworkConnections", NetworkConnections,
        "RemoteIPs", RemoteIPs,
        "ChildProcesses", ChildProcesses,
        "ScriptFile", ScriptFileName,
        "CreationToExecutionSeconds", CreationToExecutionSeconds
    ),
    MITRETechniques = case(
        InterpreterName has "python", "T1059.006 (Python)",
        InterpreterName has "node", "T1059.007 (JavaScript)",
        InterpreterName has "perl", "T1059 (Command and Scripting Interpreter)",
        InterpreterName has "ruby", "T1059 (Command and Scripting Interpreter)",
        InterpreterName has "php", "T1059 (Command and Scripting Interpreter)",
        "T1059 (Command and Scripting Interpreter)"
    ),
    RecommendedActions = case(
        AlertSeverity == "Critical", "IMMEDIATE: Isolate device, kill process tree, quarantine script file, investigate for C2 communication and lateral movement. Review account for compromise.",
        AlertSeverity == "High", "URGENT: Validate script execution legitimacy, analyze script content, check network connections, review spawned processes. Investigate parent process chain.",
        "Review script execution context, validate against approved automation, check for signs of malicious intent"
    )
| project
    TimeGenerated,
    AlertSeverity,
    TotalRiskScore,
    DeviceName,
    AttackerAccount,
    InterpreterName,
    ProcessPath,
    ParentProcess,
    CommandLine,
    Signal,
    NetworkConnections = coalesce(NetworkConnections, 0),
    RemoteIPs = coalesce(RemoteIPs, dynamic([])),
    ChildProcessCount = coalesce(ChildProcessCount, 0),
    ChildProcesses = coalesce(ChildProcesses, dynamic([])),
    Evidence,
    MITRETechniques,
    RecommendedActions
| sort by TotalRiskScore desc, TimeGenerated desc

references:
  - https://attack.mitre.org/techniques/T1059/
  - https://attack.mitre.org/techniques/T1059/006/
  - https://attack.mitre.org/techniques/T1059/007/
  - https://www.volexity.com/blog/2021/08/24/north-korean-bluelight-special-inkysquid-deploys-rokrat/
  - https://www.iranwatch.org/sites/default/files/public-intelligence-alert.pdf
  - https://blog.talosintelligence.com/arcanedoor-new-espionage-focused-campaign-found-targeting-perimeter-network-devices/
  - https://research.checkpoint.com/2020/bandook-signed-delivered/
  - https://cloud.google.com/blog/topics/threat-intelligence/investigating-ivanti-zero-day-exploitation/

triage: |
  This alert means an interpreter (Python, Node.js, etc.) is likely running malicious or heavily obfuscated code, potentially connecting to an attacker.
    1. Immediate Containment & Process Termination
      •	Isolate Device: Immediately isolate the DeviceName to prevent C2 communications, data exfiltration, and lateral movement.
      •	Terminate Process Tree: Identify the ProcessId of the script interpreter (InterpreterName) and terminate the entire process tree. This stops the script and any malicious child processes it may have spawned (e.g., cmd.exe, powershell.exe).
      •	Block Indicators: Review the RemoteIPs and RemotePorts from the evidence and immediately block these indicators at the firewall/perimeter level.
    2. Forensic Artifact Collection
      •	Locate and Analyze Script: If the Evidence includes a ScriptFile (ScriptFileName and ScriptFilePath), quarantine and collect the file. Analyze its contents immediately to determine its true function (e.g., reverse shell, keylogger, credential dumper).
      •	Analyze Command Line: Review the CommandLine for encoded or embedded content. Attempt to decode the command (e.g., Base64 strings) to find the true instructions, URLs, C2 domains, or final payload.
    3. Contextual Scoping & Follow-on Activity
      •	Parent Process Review: Investigate the ParentProcess (e.g., browser, email client, Office app). This is the initial entry point. Review the parent application's activity just prior to the alert for signs of an exploit, drive-by download, or successful phishing attack.
      •	Child Process Review: Review the ChildProcesses list. If it includes reconnaissance tools (whoami, netstat, wmic), the attacker is actively gaining intel. If it includes dumping tools or lateral movement binaries, escalate the containment scope immediately.
      •	Account Remediation: The AttackerAccount is compromised. Force a password reset and investigate their login history for lateral movement attempts from new hosts.


notes: |
  - Lots of opportunity to enrich in Module 3, esp if TA infrastructure tracking is a possible enrichment
