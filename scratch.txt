# DE-HY25.14 Azure Security Center/Defender Modification Detection
id: DE-HY25.14
title: Azure Security Center/Defender Modification Detection
description: |
  Detects high-risk modifications, deletions, or disabling of critical Azure security controls 
  (Defender, Audit Logs, Key Vault Protection) correlated with suspicious identity or velocity.
severity: High
status: draft
author: \m/
date_created: 2025-10-22
date_modified: 2025-10-22
tags:
  - clarifi_path: Cloud/Azure-Activity/Defense_Evasion
  - tactic: Defense Evasion
  - tactic: Privilege Escalation
  - technique: Impair Defenses: Disable or Modify System Controls 
  - technique: Account Manipulation: Additional Cloud Credentials
  - ATT&CK_ID: 	T1562.001 # Impair Defenses: Disable or Modify System Controls 
  - ATT&CK_ID: T1098.001 # Account Manipulation: Additional Cloud Credentials
  - method: Correlation/Sequence
  - method: Signature/String-Match
  - method: Statistical/Frequency
  - method: Threshold/Count-Limit
  - core_indicator: Vol_API_Spike
  - core_indicator: Event_SecurityDisable
  - core_indicator: Access_SecurityCenter
  - datasource: AzureActivity
  - datasource: AuditLogs

logic:
  query: |

// Defense Evasion: Azure Security Center/Defender Modification Detection
// Detects disabling, deletion, or modification of critical security controls in Azure

// Configuration
let LookbackWindow = 7d;
let CorrelationWindow = 30m; // Window for detecting blast radius attacks
let VelocityWindow = 1h; // For detecting rapid security changes

// Known legitimate automation identities (customize for your environment)
let LegitimateAutomationAppIds = dynamic([
    // "12345678-1234-1234-1234-123456789abc", // Azure DevOps Service Connection
    // "87654321-4321-4321-4321-cba987654321"  // Terraform Cloud
]);

let LegitimateAutomationNames = dynamic([
    // "terraform-prod-automation",
    // "azuredevops-pipeline",
    // "github-actions-prod"
]);

// Corporate/VPN IP ranges (CUSTOMIZE!!! This may be a little tough given sophisticated attackers will know to use MS IP ranges)
let CorporateIPRanges = dynamic([
    // "10.0.0.0/8",
    // "172.16.0.0/12",
    // "192.168.0.0/16"
]);

// Critical production subscriptions (CUSTOMIZE OR REMOVE)
let CriticalSubscriptions = dynamic([
    // "prod-subscription-id-1",
    // "prod-subscription-id-2"
]);

// High-risk security operations (PRICING MAY NOT APPLY HERE FOR OBVIOUS REASONS - BUT CHANGING TO FREE MAY STILL BE VALID TACTIC)
let SecurityDisablingOperations = dynamic([
    // Microsoft Defender for Cloud / Security Center
    "Microsoft.Security/pricings/write",                    // Changing pricing tier (often to Free/disabled)
    "Microsoft.Security/pricings/delete",
    "Microsoft.Security/autoProvisioningSettings/write",    // Disabling auto-provisioning
    "Microsoft.Security/securityContacts/delete",
    "Microsoft.Security/securityContacts/write",
    "Microsoft.Security/settings/write",
    "Microsoft.Security/iotSecuritySolutions/delete",
    "Microsoft.Security/assessments/write",                 // Modifying security assessments
    "Microsoft.Security/automations/delete",                // Deleting security automation
    
    // Diagnostic Settings (Audit Log Evasion)
    "Microsoft.Insights/diagnosticSettings/delete",
    "Microsoft.Insights/diagnosticSettings/write",
    
    // Azure Monitor & Alerting
    "Microsoft.Insights/activityLogAlerts/delete",
    "Microsoft.Insights/scheduledQueryRules/delete",        // Deleting KQL alert rules
    "Microsoft.Insights/actionGroups/delete",
    "Microsoft.Insights/workbooks/delete",
    
    // Security Policies & Compliance
    "Microsoft.Authorization/policyAssignments/delete",
    "Microsoft.Authorization/policyAssignments/write",
    "Microsoft.Authorization/policyExemptions/write",       // Creating policy exemptions
    "Microsoft.Authorization/policyExemptions/delete",
    
    // Network Security
    "Microsoft.Network/networkSecurityGroups/delete",
    "Microsoft.Network/networkSecurityGroups/securityRules/delete",
    "Microsoft.Network/azureFirewalls/delete",
    "Microsoft.Network/firewallPolicies/delete",
    
    // Key Vault Security
    "Microsoft.KeyVault/vaults/write",                      // Disabling soft delete/purge protection
    "Microsoft.KeyVault/vaults/delete",
    
    // Storage Security
    "Microsoft.Storage/storageAccounts/write",              // Disabling threat protection
    "Microsoft.Storage/storageAccounts/blobServices/write",
    
    // Resource Protection
    "Microsoft.Authorization/locks/delete",                 // Removing resource locks
    
    // Conditional Access (Entra ID/AAD)
    "Microsoft.Authorization/roleAssignments/delete",
    "Microsoft.Authorization/roleDefinitions/delete"
]);

// --- Module 1: Core Security Modification Detection ---
let SecurityModifications = AzureActivity
| where TimeGenerated >= ago(LookbackWindow)
| where OperationNameValue has_any (SecurityDisablingOperations)
    or (OperationNameValue has "Microsoft.Security" and OperationNameValue has_any ("delete", "write"))
    or (OperationNameValue has "Microsoft.Insights" and OperationNameValue has_any ("delete", "write"))
| extend
    // Parse identity information
    CallerObjectId = tostring(parse_json(tostring(Claims)).["http://schemas.microsoft.com/identity/claims/objectidentifier"]),
    CallerUPN = tostring(parse_json(tostring(Claims)).upn),
    CallerAppId = tostring(parse_json(tostring(Claims)).appid),
    CallerAppDisplayName = tostring(parse_json(tostring(Claims)).appidacr),
    CallerIdentityType = case(
        isnotempty(parse_json(tostring(Claims)).appid), "ServicePrincipal",
        isnotempty(parse_json(tostring(Claims)).upn), "User",
        "ManagedIdentity"
    )
| extend
    // Determine actual caller identity
    CallerIdentity = coalesce(CallerUPN, CallerAppId, CallerObjectId, Caller),
    OperationCategory = case(
        OperationNameValue has "pricings", "DefenderPlanChange",
        OperationNameValue has "diagnosticSettings", "AuditLogModification",
        OperationNameValue has "policyAssignments", "PolicyChange",
        OperationNameValue has "policyExemptions", "PolicyExemption",
        OperationNameValue has "activityLogAlerts", "AlertDeletion",
        OperationNameValue has "networkSecurityGroups", "NetworkSecurityChange",
        OperationNameValue has "locks", "ResourceLockRemoval",
        OperationNameValue has "KeyVault", "KeyVaultSecurityChange",
        "OtherSecurityChange"
    )
| where ActivityStatusValue in ("Success", "Succeeded", "Accepted")
| extend
    SourceIP = CallerIpAddress,
    SubscriptionId = tostring(split(_SubscriptionId, "/")[-1]),
    ResourceGroupName = tostring(split(_ResourceId, "/")[4]),
    ResourceName = tostring(split(_ResourceId, "/")[-1]),
    IsCriticalSubscription = SubscriptionId in~ (CriticalSubscriptions)
| extend
    // Check if identity is whitelisted
    IsWhitelistedIdentity = CallerAppId in~ (LegitimateAutomationAppIds)
        or CallerIdentity has_any (LegitimateAutomationNames)
| where not(IsWhitelistedIdentity)
| extend
    // IP reputation analysis (THIS MAY BE A LESS USEFUL TACTIC COMPARATIVE TO THE OTHERS)
    IsPrivateIP = ipv4_is_private(SourceIP),
    IsCorporateIP = SourceIP has_any (CorporateIPRanges),
    IsAzureIP = SourceIP startswith "20." or SourceIP startswith "40." or SourceIP startswith "52." or SourceIP startswith "104.",
    IsPublicIP = not(IsPrivateIP) and not(IsAzureIP)
| project TimeGenerated, OperationNameValue, OperationCategory, CallerIdentity, CallerIdentityType,
          CallerObjectId, CallerAppId, SourceIP, ActivityStatusValue, SubscriptionId, ResourceGroupName,
          ResourceName, IsCriticalSubscription, IsPublicIP, IsCorporateIP, IsAzureIP,
          Properties, CorrelationId, _ResourceId;

// --- Module 2: Blast Radius Analysis (Multiple Changes in Short Time) ---
let BlastRadiusAttacks = SecurityModifications
| summarize
    ModificationCount = count(),
    OperationTypes = make_set(OperationCategory),
    ResourcesAffected = make_set(ResourceName),
    Subscriptions = make_set(SubscriptionId),
    FirstModification = min(TimeGenerated),
    LastModification = max(TimeGenerated)
    by CallerIdentity, bin(TimeGenerated, CorrelationWindow)
| where ModificationCount >= 3  // 3+ security changes in 30 minutes
| extend
    TimeSpanMinutes = datetime_diff('minute', LastModification, FirstModification),
    UniqueOperationTypes = array_length(OperationTypes),
    UniqueSubscriptions = array_length(Subscriptions),
    Signal = "Blast_Radius_Attack"
| project TimeGenerated = LastModification, CallerIdentity, ModificationCount, UniqueOperationTypes,
          OperationTypes, ResourcesAffected, UniqueSubscriptions, TimeSpanMinutes, Signal;

// --- Module 3: Specific High-Risk Operation Analysis ---

// Defender for Cloud pricing changes (disabling)
let DefenderDisabling = SecurityModifications
| where OperationCategory == "DefenderPlanChange"
| extend PricingTier = tostring(parse_json(tostring(Properties)).pricingTier)
| where PricingTier =~ "Free" or OperationNameValue has "delete"
| extend
    Signal = "Defender_Plan_Disabled",
    DefenderPlan = tostring(split(_ResourceId, "/")[-1])
| project TimeGenerated, CallerIdentity, CallerIdentityType, SourceIP, SubscriptionId,
          DefenderPlan, PricingTier, Signal, IsCriticalSubscription;

// Diagnostic settings deletion (audit evasion)
let AuditLogDeletion = SecurityModifications
| where OperationCategory == "AuditLogModification"
| where OperationNameValue has "delete"
| extend
    Signal = "Audit_Log_Deletion",
    AffectedResource = ResourceName
| project TimeGenerated, CallerIdentity, CallerIdentityType, SourceIP, SubscriptionId,
          ResourceGroupName, AffectedResource, Signal, IsCriticalSubscription;

// Policy exemptions (compliance bypass)
let PolicyExemptions = SecurityModifications
| where OperationCategory == "PolicyExemption"
| where OperationNameValue has "write"
| extend
    Signal = "Policy_Exemption_Created",
    ExemptionName = ResourceName
| project TimeGenerated, CallerIdentity, CallerIdentityType, SourceIP, SubscriptionId,
          ExemptionName, Signal, IsCriticalSubscription;

// Resource lock removal (protection bypass)
let LockRemovals = SecurityModifications
| where OperationCategory == "ResourceLockRemoval"
| extend
    Signal = "Resource_Lock_Removed",
    ProtectedResource = tostring(split(_ResourceId, "/providers/Microsoft.Authorization")[0])
| project TimeGenerated, CallerIdentity, CallerIdentityType, SourceIP, SubscriptionId,
          ProtectedResource, Signal, IsCriticalSubscription;

// Key Vault security changes
let KeyVaultChanges = SecurityModifications
| where OperationCategory == "KeyVaultSecurityChange"
| extend
    Properties_Json = parse_json(tostring(Properties)),
    EnableSoftDelete = tobool(parse_json(tostring(Properties)).enableSoftDelete),
    EnablePurgeProtection = tobool(parse_json(tostring(Properties)).enablePurgeProtection)
| where EnableSoftDelete == false or EnablePurgeProtection == false or OperationNameValue has "delete"
| extend
    Signal = "KeyVault_Protection_Disabled",
    KeyVaultName = ResourceName
| project TimeGenerated, CallerIdentity, CallerIdentityType, SourceIP, SubscriptionId,
          KeyVaultName, EnableSoftDelete, EnablePurgeProtection, Signal, IsCriticalSubscription;

// --- Module 4: Identity Context Analysis ---
let RecentRoleChanges = AzureActivity
| where TimeGenerated >= ago(LookbackWindow)
| where OperationNameValue has "Microsoft.Authorization/roleAssignments/write"
| extend
    NewRoleObjectId = tostring(parse_json(tostring(Claims)).["http://schemas.microsoft.com/identity/claims/objectidentifier"]),
    RoleAssignmentTime = TimeGenerated
| summarize RecentRoleAssignment = max(RoleAssignmentTime) by NewRoleObjectId;

let SecurityModsWithRoleContext = SecurityModifications
| join kind=leftouter (RecentRoleChanges) on $left.CallerObjectId == $right.NewRoleObjectId
| extend
    MinutesSinceRoleAssignment = datetime_diff('minute', TimeGenerated, RecentRoleAssignment),
    IsRecentlyElevated = MinutesSinceRoleAssignment <= 60 and isnotnull(RecentRoleAssignment);

// --- Module 5: Velocity Analysis ---
let VelocityAnalysis = SecurityModifications
| summarize
    ModsInVelocityWindow = count(),
    UniqueResourceGroups = dcount(ResourceGroupName),
    UniqueSubscriptions = dcount(SubscriptionId)
    by CallerIdentity, bin(TimeGenerated, VelocityWindow)
| where ModsInVelocityWindow >= 5  // 5+ changes in 1 hour
| extend Signal = "High_Velocity_Changes"
| project TimeGenerated, CallerIdentity, ModsInVelocityWindow, UniqueResourceGroups,
          UniqueSubscriptions, Signal;

// --- Consolidate All Detections ---
let AllDetections = union isfuzzy=true
    (SecurityModsWithRoleContext | extend Signal = "Security_Modification"),
    (BlastRadiusAttacks),
    (DefenderDisabling),
    (AuditLogDeletion),
    (PolicyExemptions),
    (LockRemovals),
    (KeyVaultChanges),
    (VelocityAnalysis)
| extend
    IsCriticalSubscription = coalesce(IsCriticalSubscription, false),
    IsPublicIP = coalesce(IsPublicIP, false),
    IsRecentlyElevated = coalesce(IsRecentlyElevated, false),
    ModificationCount = coalesce(ModificationCount, 1),
    ModsInVelocityWindow = coalesce(ModsInVelocityWindow, 1);

// --- Risk Scoring ---
AllDetections
| extend
    BaseRisk = case(
        Signal == "Defender_Plan_Disabled", 95,
        Signal == "Audit_Log_Deletion", 90,
        Signal == "Policy_Exemption_Created", 85,
        Signal == "KeyVault_Protection_Disabled", 85,
        Signal == "Resource_Lock_Removed", 80,
        Signal == "Blast_Radius_Attack", 90,
        Signal == "High_Velocity_Changes", 80,
        Signal == "Security_Modification" and OperationCategory == "AuditLogModification", 85,
        Signal == "Security_Modification", 70,
        60
    ),
    ContextBonus =
        iff(IsCriticalSubscription, 20, 0)
        + iff(IsPublicIP and not(IsCorporateIP), 20, 0)
        + iff(CallerIdentityType == "ServicePrincipal" and CallerIdentity !has "microsoft", 15, 0)
        + iff(IsRecentlyElevated, 15, 0)
        + iff(ModificationCount >= 5, 15, 0)
        + iff(UniqueSubscriptions >= 3, 10, 0)
        + iff(hourofday(TimeGenerated) >= 22 or hourofday(TimeGenerated) <= 6, 10, 0),  // Off-hours
    TotalRiskScore = BaseRisk + ContextBonus
| extend
    AlertSeverity = case(
        TotalRiskScore >= 100, "Critical",
        TotalRiskScore >= 80, "High",
        TotalRiskScore >= 60, "Medium",
        "Low"
    )
| where AlertSeverity in ("Critical", "High", "Medium")
| extend
    Evidence = bag_pack(
        "Signal", Signal,
        "OperationType", coalesce(OperationCategory, OperationTypes),
        "Caller", CallerIdentity,
        "CallerType", CallerIdentityType,
        "SourceIP", SourceIP,
        "Subscription", coalesce(SubscriptionId, Subscriptions),
        "ResourceGroup", ResourceGroupName,
        "AffectedResources", coalesce(ResourceName, ResourcesAffected),
        "ModificationCount", ModificationCount,
        "IsPublicIP", IsPublicIP,
        "IsRecentlyElevated", IsRecentlyElevated,
        "IsCriticalSubscription", IsCriticalSubscription
    ),
    MITRETechniques = "T1562.001 (Impair Defenses: Disable or Modify Cloud Security Controls)",
    RecommendedActions = case(
        AlertSeverity == "Critical", "IMMEDIATE: Isolate identity, review all recent changes, restore security controls, investigate for data exfiltration or lateral movement. Check for compromised credentials.",
        AlertSeverity == "High", "URGENT: Validate change authorization against change management records. If unauthorized, immediately restore controls and investigate identity compromise. Review audit logs for tampering.",
        "Review change context and authorization. Validate against scheduled maintenance windows. Ensure change follows security procedures."
    )
| project
    TimeGenerated,
    AlertSeverity,
    TotalRiskScore,
    Signal,
    CallerIdentity = coalesce(CallerIdentity, "Unknown"),
    CallerType = coalesce(CallerIdentityType, "Unknown"),
    SourceIP = coalesce(SourceIP, "Unknown"),
    SubscriptionId = coalesce(SubscriptionId, tostring(Subscriptions)),
    OperationType = coalesce(OperationCategory, tostring(OperationTypes)),
    AffectedResources = coalesce(ResourceName, tostring(ResourcesAffected)),
    ModificationCount = coalesce(ModificationCount, ModsInVelocityWindow),
    Evidence,
    MITRETechniques,
    RecommendedActions
| sort by TotalRiskScore desc, TimeGenerated desc

references:
  - https://attack.mitre.org/techniques/T1562/001/
  - https://attack.mitre.org/techniques/T1098/001/
  - https://redcanary.com/threat-detection-report/techniques/disabling-security-tools/
  - https://www.guidepointsecurity.com/newsroom/akira-ransomware-abuses-cpu-tuning-tool-to-disable-microsoft-defender/
  - https://www.scworld.com/brief/akira-ransomware-seeks-to-deactivate-microsoft-defender
  - https://www.microsoft.com/en-us/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/

triage: |
  This alert signals that a successful API call was made to disable, delete, or modify core cloud security controls (e.g., turning off Defender for Cloud, deleting audit settings, or removing resource locks).
    1. Immediate Identity & Scope Isolation
      •	Isolate Identity: Immediately disable or revoke the credentials for the CallerIdentity (User or Service Principal). If possible, suspend the identity's session and force a token refresh.
      •	Network Isolation (API): If the change originated from a highly suspicious, external SourceIP (especially if a public/non-corporate IP), consider temporarily blocking that IP from accessing your cloud management plane.
      •	Identify Blast Radius: Review the ModificationCount and AffectedResources in the evidence. Determine if the attacker targeted a single resource or spread the evasion across multiple Subscriptions or Resource Groups.
    2. Reverse Defense Evasion
      •	Restore Controls: The most critical step is to immediately restore the security controls that were modified or deleted. Prioritize the following based on the OperationType:
        o	Audit Log Modification: Re-enable or re-link the Diagnostic Settings for the affected resources.
        o	Defender Plan Change: Revert the security Pricing Tier back to the standard/paid tier.
        o	Resource Lock Removal: Re-apply the Resource Lock to prevent resource deletion.
        o	Key Vault Protection: Re-enable Soft Delete and Purge Protection on the Key Vault.
      •	Restore Policy: If a security policy was deleted or an exemption was created, re-apply the policy assignment or delete the new policy exemption.
    3. Compromise Scoping and Remediation
      •	Check for Pre-Attack PE: Review the logs for the CallerIdentity in the hour preceding the attack. Look for the IsRecentlyElevated flag. If true, investigate the Role Assignment to understand how the attacker gained the necessary permissions to make the security change.
      •	Follow-on Attack: The security change was likely a preparation step. Immediately pivot to the affected resources and look for the attacker's next move (e.g., Key Vault Access, Virtual Machine Execution, Data Exfiltration to external storage accounts).
      •	Escalate: Confirm the incident as a breach involving T1562.001 (Impair Defenses) and escalate, providing the full timeline of Privilege Escalation (if detected) and Defense Evasion.

notes: |
  - May be difficult to balance specific whitelisting with ensuring wide-ranging adoption of this analytic (e.g. balancing specificity vs FP rate), but if analytic is functional it may be worth the effort.
