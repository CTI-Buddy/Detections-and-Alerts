# DE-HY25.11 Defense Evasion: Binary Masquerading Detection 
id: DE-HY25.11
title: Defense Evasion: Binary Masquerading Detection 
description: |
  Detects binary masquerading by monitoring for system-named processes (e.g., svchost.exe) 
  executed from suspicious paths, lacking valid signatures, or having anomalous parent processes
severity: High
status: draft
author: \m/
date_created: 2025-10-20
date_modified: 2025-10-20
tags:
  - clarifi_path: Endpoint/Windows/Defense_Evasion
  - tactic: Defense Evasion
  - tactic: Execution
  - technique: Masquerading: Rename System Utility
  - ATT&CK_ID: T1036.003 # Masquerading: Rename System Utility
  - method: Correlation/Multi-Event
  - method: Signature/String-Match
  - core_indicator: Event_BinaryRename
  - core_indicator: File_UnsignedBinary
  - core_indicator: File_SuspiciousPath
  - datasource: DeviceProcessEvents
  - datasource: DeviceFileEvents

logic:
  query: |

// Defense Evasion: Binary Masquerading Detection 
// Detects execution of renamed/copied high-risk binaries disguised as legitimate system processesds

// Configuration
let LookbackWindow = 7d;
let FileCreationWindow = 30d; // Look back further for file creation correlation

// High-Risk Utilities frequently renamed by attackers - this can also be edited!!
let HighRiskBinaries = dynamic([
    "powershell.exe", "pwsh.exe", "cmd.exe", "cscript.exe", "wscript.exe",
    "certutil.exe", "bitsadmin.exe", "mshta.exe", "wmic.exe", "regsvr32.exe",
    "rundll32.exe", "net.exe", "net1.exe", "findstr.exe", "vssadmin.exe",
    "whoami.exe", "nltest.exe", "qprocess.exe", "tasklist.exe", "taskkill.exe",
    "reg.exe", "sc.exe", "bcdedit.exe", "netsh.exe", "psexec.exe"
]);

// Known file hashes of legitimate Windows system binaries (PLEASE JUDICIOUSLY CUSTOMIZE THIS)
// Build this table from baseline analysis of your Windows systems - identify trusted signatures and denote them here
let LegitimateSystemHashes = datatable(FileName:string, LegitHash:string)
[
    // Example entries - populate with actual hashes - THIS IS CRITICAL AND REQUIRES A SCAN OR COORDINATION WITH OTHER STAKEHOLDERS
    "svchost.exe", "YOUR_KNOWN_GOOD_HASH_1",
    "explorer.exe", "YOUR_KNOWN_GOOD_HASH_2",
    "services.exe", "YOUR_KNOWN_GOOD_HASH_3"
    // Add more as needed from a baseline
];

// Benign system process names used for masquerading
let BenignSystemNames = dynamic([
    "svchost.exe", "explorer.exe", "services.exe", "csrss.exe",
    "lsass.exe", "winlogon.exe", "spoolsv.exe", "dllhost.exe",
    "taskmgr.exe", "conhost.exe", "audiodg.exe", "smss.exe",
    "wininit.exe", "dwm.exe", "lsm.exe"
]);

// Legitimate Windows system paths where these binaries belong
let LegitimateSystemPaths = dynamic([
    "\\windows\\system32\\",
    "\\windows\\syswow64\\",
    "\\windows\\winsxs\\"
]);

// Suspicious file paths where attackers stage tools
let SuspiciousFilePaths = dynamic([
    "\\temp\\", "\\tmp\\", "\\appdata\\local\\temp\\",
    "\\appdata\\roaming\\", "\\programdata\\",
    "\\public\\", "\\users\\public\\", "\\downloads\\",
    "\\perflogs\\", "\\$recycle.bin\\", "\\windows\\temp\\",
    "\\inetpub\\", "\\wwwroot\\"
]);

// --- Module 1: Hash Mismatch Detection (Highest Fidelity) ---
// Detects system-named processes with non-standard hashes
let HashMismatch = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName has_any (BenignSystemNames)
| where isnotempty(SHA256)
| extend ProcessPath = tolower(FolderPath)
// Exclude legitimate system paths
| where not(ProcessPath has_any (LegitimateSystemPaths))
| extend
    Signal = "System_Name_Wrong_Location",
    AttackerAccount = AccountName,
    ParentProcess = InitiatingProcessFileName,
    ParentCommandLine = InitiatingProcessCommandLine,
    ParentPath = InitiatingProcessFolderPath,
    IsSuspiciousPath = ProcessPath has_any (SuspiciousFilePaths)
| project TimeGenerated, DeviceName, Signal, AttackerAccount, ProcessName = FileName,
          ProcessCommandLine, ProcessPath = FolderPath, SHA256, ParentProcess, ParentCommandLine,
          ParentPath, IsSuspiciousPath, ProcessId = ProcessId;

// --- Module 2: Unsigned System Binary Detection ---
// Legitimate Windows system binaries are always signed by Microsoft
let UnsignedSystemBinary = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName has_any (BenignSystemNames)
| extend ProcessPath = tolower(FolderPath)
// Exclude legitimate paths
| where not(ProcessPath has_any (LegitimateSystemPaths))
| extend
    SignatureStatus = tostring(AdditionalFields.SignatureStatus),
    SignerInfo = tostring(AdditionalFields.IssuerName)
| where SignatureStatus !in ("Valid", "Trusted") 
    or SignerInfo !contains "Microsoft"
    or isempty(SignatureStatus)
| extend
    Signal = "Unsigned_System_Binary_Name",
    AttackerAccount = AccountName,
    ParentProcess = InitiatingProcessFileName,
    IsSuspiciousPath = ProcessPath has_any (SuspiciousFilePaths)
| project TimeGenerated, DeviceName, Signal, AttackerAccount, ProcessName = FileName,
          ProcessCommandLine, ProcessPath = FolderPath, SHA256, SignatureStatus, SignerInfo,
          ParentProcess, IsSuspiciousPath, ProcessId = ProcessId;

// --- Module 3: Suspicious File Copy Operations ---
// Detects copying high-risk tools to unusual locations with benign names
let SuspiciousCopy = DeviceFileEvents
| where TimeGenerated >= ago(LookbackWindow)
| where ActionType in ("FileCreated", "FileModified")
| where FileName has_any (BenignSystemNames)
| extend FilePath = tolower(FolderPath)
| where FilePath has_any (SuspiciousFilePaths)
| extend
    CopierProcess = InitiatingProcessFileName,
    CopierCommandLine = InitiatingProcessCommandLine,
    CopierAccount = AccountName,
    FileCreationTime = TimeGenerated
| project FileCreationTime, DeviceName, FileName, FilePath = FolderPath, SHA256,
          CopierProcess, CopierCommandLine, CopierAccount, FileSize;

// Correlate file copy with subsequent execution
let CopyThenExecute = SuspiciousCopy
| join kind=inner (
    DeviceProcessEvents
    | where TimeGenerated >= ago(LookbackWindow)
    | project ExecutionTime = TimeGenerated, DeviceName, ProcessName = FileName,
              ProcessCommandLine, ProcessPath = FolderPath, ExecutionSHA256 = SHA256,
              ExecutionAccount = AccountName, ParentProcess = InitiatingProcessFileName
) on DeviceName, $left.FileName == $right.ProcessName, $left.SHA256 == $right.ExecutionSHA256
| where ExecutionTime >= FileCreationTime and ExecutionTime <= (FileCreationTime + 24h)
| extend
    Signal = "Suspicious_Copy_Then_Execute",
    TimeDelta = datetime_diff('minute', ExecutionTime, FileCreationTime)
| project TimeGenerated = ExecutionTime, DeviceName, Signal, AttackerAccount = ExecutionAccount,
          ProcessName, ProcessCommandLine, ProcessPath, SHA256, CopierProcess, CopierCommandLine,
          TimeDelta, ParentProcess;

// --- Module 4: Parent Process Anomaly Detection ---
// System processes should have specific parent processes
let ParentProcessAnomalies = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName has_any (BenignSystemNames)
| extend
    ProcessPath = tolower(FolderPath),
    ParentProcess = InitiatingProcessFileName,
    ParentPath = tolower(InitiatingProcessFolderPath)
// Exclude legitimate system paths
| where not(ProcessPath has_any (LegitimateSystemPaths))
| extend
    // Flag unusual parent processes for system binaries
    HasSuspiciousParent = ParentProcess in~ (
        "cmd.exe", "powershell.exe", "wscript.exe", "cscript.exe",
        "mshta.exe", "regsvr32.exe", "rundll32.exe", "excel.exe",
        "winword.exe", "outlook.exe", "chrome.exe", "firefox.exe"
    ),
    ParentInSuspiciousPath = ParentPath has_any (SuspiciousFilePaths),
    IsSuspiciousPath = ProcessPath has_any (SuspiciousFilePaths)
| where HasSuspiciousParent or ParentInSuspiciousPath
| extend
    Signal = "Abnormal_Parent_Process",
    AttackerAccount = AccountName,
    ParentCommandLine = InitiatingProcessCommandLine
| project TimeGenerated, DeviceName, Signal, AttackerAccount, ProcessName = FileName,
          ProcessCommandLine, ProcessPath = FolderPath, ParentProcess, ParentCommandLine,
          ParentPath = InitiatingProcessFolderPath, HasSuspiciousParent, IsSuspiciousPath;

// --- Module 5: High-Risk Binary Renamed Detection ---
// Detect when high-risk utilities are in suspicious paths (likely copied/renamed)
let HighRiskInSuspiciousPath = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName has_any (HighRiskBinaries)
| extend ProcessPath = tolower(FolderPath)
| where ProcessPath has_any (SuspiciousFilePaths)
| extend
    Signal = "High_Risk_Binary_Suspicious_Path",
    AttackerAccount = AccountName,
    ParentProcess = InitiatingProcessFileName,
    ParentCommandLine = InitiatingProcessCommandLine
| project TimeGenerated, DeviceName, Signal, AttackerAccount, ProcessName = FileName,
          ProcessCommandLine, ProcessPath = FolderPath, SHA256, ParentProcess, ParentCommandLine;

// --- Module 6: File Extension Mismatch ---
// Detect executables with misleading extensions (e.g., svchost.txt that's actually an EXE)
let ExtensionMismatch = DeviceFileEvents
| where TimeGenerated >= ago(LookbackWindow)
| where ActionType == "FileCreated"
| extend FilePath = tolower(FolderPath)
| where FilePath has_any (SuspiciousFilePaths)
// File has benign extension but is executable
| where (FileName endswith ".txt" or FileName endswith ".log" or FileName endswith ".dat")
    and FileSize > 10000
| extend
    CreatorProcess = InitiatingProcessFileName,
    CreatorCommandLine = InitiatingProcessCommandLine,
    CreatorAccount = AccountName,
    HasSystemName = FileName has_any (BenignSystemNames)
| where HasSystemName or CreatorProcess has_any (HighRiskBinaries)
| extend Signal = "Extension_Mismatch_Suspicious"
| project TimeGenerated, DeviceName, Signal, FileName, FilePath = FolderPath, FileSize,
          CreatorProcess, CreatorCommandLine, CreatorAccount = AccountName, SHA256;

// --- Consolidate All Detections ---
let AllMasquerades = union isfuzzy=true
    HashMismatch,
    UnsignedSystemBinary,
    CopyThenExecute,
    ParentProcessAnomalies,
    HighRiskInSuspiciousPath,
    ExtensionMismatch
| extend
    IsSuspiciousPath = coalesce(IsSuspiciousPath, false),
    HasSuspiciousParent = coalesce(HasSuspiciousParent, false);

// --- Risk Scoring and Prioritization ---
AllMasquerades
| extend
    BaseRisk = case(
        Signal == "Unsigned_System_Binary_Name", 95,
        Signal == "System_Name_Wrong_Location" and IsSuspiciousPath, 90,
        Signal == "Suspicious_Copy_Then_Execute", 85,
        Signal == "System_Name_Wrong_Location", 80,
        Signal == "Abnormal_Parent_Process" and IsSuspiciousPath, 80,
        Signal == "High_Risk_Binary_Suspicious_Path", 75,
        Signal == "Abnormal_Parent_Process", 70,
        Signal == "Extension_Mismatch_Suspicious", 65,
        60
    ),
    RiskBonus =
        iff(IsSuspiciousPath, 10, 0)
        + iff(HasSuspiciousParent, 10, 0)
        + iff(ProcessName in~ ("svchost.exe", "lsass.exe", "csrss.exe"), 15, 0) // High-value targets
        + iff(ProcessCommandLine has_any ("download", "invoke", "http", "encoded", "-enc"), 15, 0)
        + iff(ParentProcess in~ ("powershell.exe", "cmd.exe", "wscript.exe"), 10, 0)
        + iff(AttackerAccount endswith "$", -10, 0) // System accounts slightly less suspicious
        + iff(CopierProcess in~ ("xcopy.exe", "copy.exe", "move.exe", "robocopy.exe"), 10, 0),
    TotalRiskScore = BaseRisk + RiskBonus
| extend
    AlertSeverity = case(
        TotalRiskScore >= 90, "Critical",
        TotalRiskScore >= 75, "High",
        TotalRiskScore >= 60, "Medium",
        "Low"
    )
| where AlertSeverity in ("Critical", "High", "Medium")
| extend
    Evidence = bag_pack(
        "Signal", Signal,
        "ProcessName", coalesce(ProcessName, FileName),
        "ProcessPath", coalesce(ProcessPath, FilePath),
        "CommandLine", coalesce(ProcessCommandLine, CreatorCommandLine),
        "ParentProcess", coalesce(ParentProcess, CopierProcess),
        "ParentCommandLine", coalesce(ParentCommandLine, CopierCommandLine),
        "FileHash", coalesce(SHA256, ""),
        "SignatureStatus", coalesce(SignatureStatus, "N/A"),
        "IsSuspiciousPath", IsSuspiciousPath,
        "HasSuspiciousParent", HasSuspiciousParent
    ),
    DetectedTechniques = "T1036.003 (Masquerading: Rename System Utility)",
    RecommendedActions = case(
        AlertSeverity == "Critical", "IMMEDIATE: Isolate device, kill process, quarantine file, investigate lateral movement and credential access",
        AlertSeverity == "High", "URGENT: Validate process legitimacy, check file signature, review parent process chain, investigate account activity",
        "Review context, validate file hash against known good hashes, check for related suspicious activity"
    )
| project
    TimeGenerated,
    AlertSeverity,
    TotalRiskScore,
    DeviceName,
    AccountName = coalesce(AttackerAccount, CreatorAccount),
    ProcessName = coalesce(ProcessName, FileName),
    ProcessPath = coalesce(ProcessPath, FilePath),
    ProcessCommandLine = coalesce(ProcessCommandLine, CopierCommandLine),
    ParentProcess = coalesce(ParentProcess, CopierProcess),
    ParentCommandLine = coalesce(ParentCommandLine, ""),
    FileHash = coalesce(SHA256, ""),
    Signal,
    Evidence,
    DetectedTechniques,
    RecommendedActions
| sort by TotalRiskScore desc, TimeGenerated desc

references:
  - https://attack.mitre.org/techniques/T1036/003/
  - https://redcanary.com/threat-detection-report/techniques/rename-system-utilities/
  - https://www.picussecurity.com/resource/masquerading
  - https://help.fortinet.com/fsiem/Public_Resource_Access/7_1_0/rules/PH_RULE_Highly_Relevant_Renamed_Binary.htm
  - https://lantern.splunk.com/Security/UCE/Guided_Insights/Threat_hunting/Detecting_masquerading
  - https://research.splunk.com/stories/masquerading_-_rename_system_utilities/

triage: |
  This alert means a high-risk utility (like PowerShell or a dumping tool) is executing under a benign system name (like svchost.exe) from an unusual location.
    1.	Immediate Containment & Process Termination:
      o	Isolate Device: Immediately isolate the DeviceName to prevent the masqueraded process from executing its malicious payload, communicating with C2, or moving laterally.
      o	Terminate Process: Using your EDR's live response capability, immediately terminate the process identified by the ProcessName and its associated ProcessId (if available) within the Evidence field.
    2.	Artifact Discovery and Forensic Collection:
      o	Locate Disguised File: Locate the file at the reported ProcessPath. If the analytic provided the original name (OldFileName in Module 1), record that. If not, record the masqueraded name.
      o	Quarantine and Collect: Quarantine the file and collect it for forensic analysis. This file is the malicious payload.
      o	Check File Hash/Signature: Verify the file's FileHash (SHA256) against public threat intelligence and against the list of LegitimateSystemHashes used in the analytic. If the file is unsigned and not a legitimate system hash, the compromise is confirmed.
    3.	Process Chain and Persistence Analysis:
      o	Analyze Parent Process: Review the ParentProcess and ParentCommandLine in the evidence. If the parent is suspicious (e.g., Office app, browser, or a script interpreter), investigate that parent process for signs of exploitation or dropping the malicious binary.
      o	Persistence Check: Search the registry, WMI subscriptions, and startup folders on the device for any entry related to the ProcessName or ProcessPath to see if the attacker has established persistence using the disguised binary.
    4.	Account Scoping and Remediation:
      o	Investigate Initiator: Review all activity for the AccountName in the 30 minutes preceding the alert. Look for evidence of file download, execution of the original high-risk utility, or lateral movement attempts.
      o	Escalate: If the masquerade is confirmed (unsigned, bad path, known malicious hash), immediately escalate, confirming a successful T1036.003 evasion and potential follow-on attack.

notes: |
  - CRITICAL to understand that Module 1 may blow up if this rule is not aggressively built out/matured in 'high risk utilities' and 'known file hashes'
