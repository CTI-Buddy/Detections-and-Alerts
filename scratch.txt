# DE-HY25.12 Discovery: Excessive Local Enumeration Detection
id: DE-HY25.12
title: Defense Evasion: Binary Masquerading Detection 
description: |
  Detects a rapid execution spike of distinct local and domain enumeration 
  commands by a single user/process, indicative of attacker reconnaissance.
severity: High
status: draft
author: \m/
date_created: 2025-10-20
date_modified: 2025-10-20
tags:
  - clarifi_path: Endpoint/Windows/Discovery
  - tactic: Discovery
  - technique: Account Discovery: Local Account
  - technique: Account Discovery: Domain Account
  - technique: Network Discovery
  - technique: System Discovery
  - technique: Process Discovery
  - technique: Network Share Discovery
  - technique: System Service Discovery
  - technique: Scheduled Task Discovery
  - technique: Domain Trust Discovery
  - ATT&CK_ID: T1087.001 # Account Discovery: Local Account
  - ATT&CK_ID: T1087.002 # Account Discovery: Domain Account
  - ATT&CK_ID: T1016 # Network Discovery
  - ATT&CK_ID: T1082 # System Discovery
  - ATT&CK_ID: T1057 # Process Discovery
  - ATT&CK_ID: T1135 # Network Share Discovery
  - ATT&CK_ID: T1007 # System Service Discovery
  - ATT&CK_ID: T1053 # Scheduled Task (Discovery)
  - ATT&CK_ID: T1482 # Domain Trust Discovery
  - method: Statistical/Frequency
  - method: Threshold/Context-Aware
  - core_indicator: Cmd_DiscoverySpike
  - core_indicator: Event_EnumerationVolume
  - core_indicator: Cmd_EnumerationBehavior
  - datasource: DeviceProcessEvents


logic:
  query: |

// Discovery: Excessive Local Enumeration Detection
// Detects rapid execution of multiple discovery commands indicating reconnaissance activity

// Configuration
let LookbackWindow = 2h;
let CorrelationWindow = 90s; // SWAG number on slow enumeration - CAN BE ADJUTED!
let DistinctCommandThreshold = 5; // Minimum distinct commands
let RapidFireThreshold = 3s; // Commands within this window = very suspicious

// Known legitimate admin accounts/groups (CUSTOMIZE!!!!)
let LegitimateAdminAccounts = dynamic([
    "admin_service", "monitoring", "scom_action"
    // Add your known admin accounts
]);

// Legitimate scanning/management tools (CUSTOMIZE!!!!!!!)
let LegitimateTools = dynamic([
    "ConfigMgrClient", "SCCM", "LanSweeper", "PDQInventory",
    "ManageEngine", "SolarWinds", "Nessus"
]);

// Native Windows discovery commands
let NativeDiscoveryCommands = dynamic([
    "whoami.exe", "net.exe", "net1.exe", "systeminfo.exe", "tasklist.exe",
    "query.exe", "quser.exe", "qprocess.exe", "qwinsta.exe",
    "ipconfig.exe", "route.exe", "arp.exe", "netstat.exe", "nbtstat.exe",
    "driverquery.exe", "sc.exe", "schtasks.exe", "at.exe",
    "wevtutil.exe", "vssadmin.exe", "gpresult.exe", "gpupdate.exe",
    "nltest.exe", "dsquery.exe", "csvde.exe", "ldifde.exe",
    "wmic.exe", "reg.exe", "cmdkey.exe", "klist.exe"
]);

// PowerShell discovery cmdlets (will extract from command line)
let PowerShellDiscoveryCmdlets = dynamic([
    "Get-LocalUser", "Get-LocalGroup", "Get-LocalGroupMember",
    "Get-ADUser", "Get-ADGroup", "Get-ADComputer", "Get-ADDomain",
    "Get-NetUser", "Get-NetGroup", "Get-NetComputer", "Get-NetShare",
    "Get-NetSession", "Get-WmiObject", "Get-CimInstance",
    "Get-Process", "Get-Service", "Get-ChildItem", "Get-ComputerInfo",
    "Get-NetTCPConnection", "Get-NetIPAddress", "Get-DnsClientCache",
    "Get-SmbShare", "Get-SmbMapping"
]);

// Discovery-indicating command-line patterns
let DiscoveryPatterns = dynamic([
    "whoami", "net user", "net group", "net localgroup", "net accounts",
    "net share", "net session", "net view", "net config", "net time",
    "systeminfo", "ipconfig /all", "route print", "arp -a",
    "netstat -ano", "tasklist /v", "sc query", "schtasks /query",
    "quser", "qwinsta", "query user", "query session",
    "nltest /domain", "nltest /dclist", "dsquery", "gpresult",
    "wmic computersystem", "wmic useraccount", "wmic group",
    "wmic share", "wmic process", "wmic service", "wmic nicconfig",
    "reg query HKLM\\System", "reg query HKLM\\Software",
    "dir c:\\users", "dir /s /b", "tree c:\\"
]);

// --- Main Detection: Process Execution Events ---
let DiscoveryEvents = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName has_any (NativeDiscoveryCommands)
    or (FileName in~ ("powershell.exe", "pwsh.exe") and ProcessCommandLine has_any (PowerShellDiscoveryCmdlets))
    or (FileName =~ "cmd.exe" and ProcessCommandLine has_any (DiscoveryPatterns))
| extend
    CommandLine = ProcessCommandLine,
    AttackerAccount = AccountName,
    ParentProcess = InitiatingProcessFileName,
    ParentCommandLine = InitiatingProcessCommandLine,
    ProcessPath = FolderPath
// Exclude legitimate admin accounts and tools
| where AttackerAccount !in~ (LegitimateAdminAccounts)
| where ParentProcess !has_any (LegitimateTools)
| extend
    // Extract the actual discovery command being run
    CoreCommand = case(
        // For cmd.exe, extract the command after /c or /k
        FileName =~ "cmd.exe", extract(@"(?:cmd(?:\.exe)?\s+/[ck]\s+)([^\s]+)", 1, CommandLine),
        // For PowerShell, extract the cmdlet name
        FileName in~ ("powershell.exe", "pwsh.exe"), extract(@"(Get-\w+|Invoke-\w+)", 1, CommandLine),
        // For direct execution, use the filename
        FileName
    ),
    // Determining the command category for better correlation... no touchy, this part is pretty distinct
    CommandCategory = case(
        ProcessCommandLine has_any ("whoami", "Get-LocalUser", "Get-ADUser", "net user", "net localgroup", "net group", "dsquery user"), "AccountDiscovery",
        ProcessCommandLine has_any ("ipconfig", "netstat", "arp", "route", "nbtstat", "Get-NetTCPConnection", "Get-NetIPAddress"), "NetworkDiscovery",
        ProcessCommandLine has_any ("systeminfo", "Get-ComputerInfo", "wmic computersystem", "Get-WmiObject", "Get-CimInstance"), "SystemDiscovery",
        ProcessCommandLine has_any ("tasklist", "Get-Process", "wmic process", "qprocess"), "ProcessDiscovery",
        ProcessCommandLine has_any ("net share", "net session", "net view", "Get-SmbShare"), "ShareDiscovery",
        ProcessCommandLine has_any ("sc query", "Get-Service", "wmic service"), "ServiceDiscovery",
        ProcessCommandLine has_any ("schtasks", "at.exe"), "ScheduledTaskDiscovery",
        ProcessCommandLine has_any ("nltest", "Get-ADDomain", "gpresult"), "DomainDiscovery",
        "GeneralDiscovery"
    ),
    // Flag suspicious parent processes (THESE CAN BE FURTHER BUILT OUT!!!!)
    HasSuspiciousParent = ParentProcess in~ (
        "winword.exe", "excel.exe", "outlook.exe", "powerpnt.exe",
        "chrome.exe", "firefox.exe", "iexplore.exe", "msedge.exe",
        "java.exe", "javaw.exe", "mshta.exe", "wscript.exe", "cscript.exe"
    ),
    // Flag scripting wrappers
    IsScriptWrapper = FileName in~ ("powershell.exe", "pwsh.exe", "cmd.exe", "wscript.exe", "cscript.exe")
| extend
    // Create correlation key based on device, account, and parent process
    SessionCorrelationKey = strcat(DeviceName, "_", AttackerAccount, "_", InitiatingProcessId),
    TimeCorrelationKey = strcat(DeviceName, "_", AttackerAccount, "_", bin(TimeGenerated, CorrelationWindow));

// --- Aggregation and Correlation ---
let AggregatedDiscovery = DiscoveryEvents
| summarize
    Commands = make_set(CoreCommand, 50),
    Categories = make_set(CommandCategory),
    CommandLines = make_list(CommandLine, 100),
    TimeStamps = make_list(TimeGenerated),
    TotalEvents = count(),
    FirstSeen = min(TimeGenerated),
    LastSeen = max(TimeGenerated),
    ParentProcesses = make_set(ParentProcess),
    HasSuspiciousParent = max(toint(HasSuspiciousParent)),
    IsScriptWrapper = max(toint(IsScriptWrapper))
    by SessionCorrelationKey, DeviceName, AttackerAccount
| extend
    DistinctCommandCount = array_length(Commands),
    DistinctCategories = array_length(Categories),
    TotalDurationSeconds = datetime_diff('second', LastSeen, FirstSeen),
    AverageCommandInterval = iff(TotalEvents > 1, datetime_diff('second', LastSeen, FirstSeen) / (TotalEvents - 1), 0)
| where DistinctCommandCount >= DistinctCommandThreshold;

// --- Calculate Command Velocity (Rapid-Fire Detection) ---
let VelocityAnalysis = DiscoveryEvents
| order by DeviceName, AttackerAccount, TimeGenerated asc
| extend PreviousTime = prev(TimeGenerated, 1)
| extend TimeDelta = datetime_diff('second', TimeGenerated, PreviousTime)
| where TimeDelta <= RapidFireThreshold and isnotnull(PreviousTime)
| summarize RapidFireCount = count() by SessionCorrelationKey;

// --- Combine Aggregation with Velocity Analysis ---
AggregatedDiscovery
| join kind=leftouter (VelocityAnalysis) on SessionCorrelationKey
| extend RapidFireCount = coalesce(RapidFireCount, 0)
| extend
    // Base risk scoring
    VolumeRisk = case(
        DistinctCommandCount >= 15, 40,
        DistinctCommandCount >= 10, 30,
        DistinctCommandCount >= 7, 20,
        10
    ),
    CategoryDiversityRisk = case(
        DistinctCategories >= 5, 20,  // Hitting many different discovery types
        DistinctCategories >= 3, 10,
        0
    ),
    VelocityRisk = case(
        RapidFireCount >= 5, 20,  // Very rapid execution
        RapidFireCount >= 2, 10,
        AverageCommandInterval <= 5, 10,  // Average interval very short
        0
    ),
    ContextRisk = case(
        HasSuspiciousParent == 1, 30,  // Office app or browser spawning discovery
        IsScriptWrapper == 1, 10,      // PowerShell/cmd wrapper
        0
    ),
    TimePatternRisk = case(
        hourofday(FirstSeen) >= 22 or hourofday(FirstSeen) <= 6, 10,  // Off-hours activity
        0
    ),
    TotalRiskScore = VolumeRisk + CategoryDiversityRisk + VelocityRisk + ContextRisk + TimePatternRisk
| extend
    AlertSeverity = case(
        TotalRiskScore >= 80, "High",
        TotalRiskScore >= 60, "Medium",
        "Low"
    )
| where AlertSeverity in ("High", "Medium")
| extend
    // Map to specific MITRE techniques based on categories detected
    MITRETechniques = case(
        Categories has "AccountDiscovery", "T1087.001 (Local Account Discovery), T1087.002 (Domain Account Discovery)",
        Categories has "NetworkDiscovery", "T1016 (System Network Configuration Discovery)",
        Categories has "SystemDiscovery", "T1082 (System Information Discovery)",
        Categories has "ProcessDiscovery", "T1057 (Process Discovery)",
        Categories has "ShareDiscovery", "T1135 (Network Share Discovery)",
        Categories has "ServiceDiscovery", "T1007 (System Service Discovery)",
        Categories has "ScheduledTaskDiscovery", "T1053 (Scheduled Task Discovery)",
        Categories has "DomainDiscovery", "T1482 (Domain Trust Discovery)",
        "Multiple Discovery Techniques"
    ),
    Evidence = bag_pack(
        "DistinctCommands", DistinctCommandCount,
        "CommandCategories", Categories,
        "TotalExecutions", TotalEvents,
        "DurationSeconds", TotalDurationSeconds,
        "AverageInterval", AverageCommandInterval,
        "RapidFireEvents", RapidFireCount,
        "ParentProcesses", ParentProcesses,
        "SampleCommands", array_slice(CommandLines, 0, 10),
        "FirstCommand", FirstSeen,
        "LastCommand", LastSeen
    ),
    RecommendedActions = case(
        AlertSeverity == "High", "URGENT: Investigate for reconnaissance activity. Check for follow-on lateral movement, credential access, or data exfiltration. Review account for compromise indicators.",
        "Validate enumeration context. Check if activity aligns with legitimate admin tasks. Review for signs of automated scanning or attacker reconnaissance."
    )
| project
    TimeGenerated = LastSeen,
    AlertSeverity,
    TotalRiskScore,
    DeviceName,
    AttackerAccount,
    DistinctCommandCount,
    DistinctCategories = array_length(Categories),
    CommandCategories = Categories,
    TotalEvents,
    DurationSeconds = TotalDurationSeconds,
    AverageIntervalSeconds = AverageCommandInterval,
    RapidFireCount,
    ParentProcesses,
    Evidence,
    MITRETechniques,
    RecommendedActions
| sort by TotalRiskScore desc, TimeGenerated desc

references:
  - https://attack.mitre.org/techniques/T1087/
  - https://attack.mitre.org/techniques/T1016/
  - https://attack.mitre.org/techniques/T1082/
  - https://attack.mitre.org/techniques/T1057/
  - https://attack.mitre.org/techniques/T1135/
  - https://attack.mitre.org/techniques/T1007/
  - https://attack.mitre.org/techniques/T1053/
  - https://attack.mitre.org/techniques/T1482/
  - https://go.crowdstrike.com/rs/281-OBQ-266/images/2022OverWatchThreatHuntingReport.pdf
  - https://www.cisa.gov/sites/default/files/2024-03/aa24-038a_csa_prc_state_sponsored_actors_compromise_us_critical_infrastructure_3.pdf
  - https://telefonicatech.com/blog/snip3-investigacion-malware
  - https://thedfirreport.com/2022/04/25/quantum-ransomware/
  - https://cloud.google.com/blog/topics/threat-intelligence/fin13-cybercriminal-mexico/

triage: |
  This alert means a user account or process is rapidly running many distinct system and network discovery commands, which is highly indicative of attacker reconnaissance (hands-on-keyboard).
    1.	Immediate Containment & Validation:
      o	Containment: Initiate a soft containment on the DeviceName and limit network connectivity (e.g., restrict outbound traffic) to prevent immediate lateral movement or C2 communication.
      o	Verify Legitimacy: Review the AttackerAccount, the ParentProcesses, and the CommandCategories from the evidence.
        •	Check Tools: Does this activity match any known, approved system administration, security, or inventory tools excluded in the analytic?
        •	Check User: Contact the user or system owner. Were they running diagnostic scripts or troubleshooting? If the user denies the activity or the process originated from a suspicious parent (like a browser), proceed as a confirmed breach.
    2.	Activity Scoping (What did they find?):
      o	Review Command Lines: Scrutinize the full list of CommandLines provided in the evidence. Pay close attention to commands that attempt to extract credentials (e.g., cmdkey, klist) or find high-value targets (e.g., nltest /dclist, net group domain admins).
      o	Analyze Follow-up Activity: Immediately search the logs for activity from the AttackerAccount on the DeviceName immediately following the discovery chain. Look for:
        •	Execution of credential dumping tools (e.g., Mimikatz, Procdump).
        •	Lateral movement attempts (e.g., psexec, RDP connection attempts to new hosts).
        •	File staging or exfiltration (bitsadmin, certutil, creation of large compressed files).
    3.	Account Remediation:
      o	Reset Credentials: If the compromise is confirmed, force a password reset for the AttackerAccount and revoke all active sessions, as the attacker may have gained temporary access to the account.
      o	Audit Permissions: If the compromised account is an Administrator or a high-value account, audit its recent administrative actions and group membership changes.
    4.	Escalation:
        o	Escalate, confirming the detection of the Discovery phase and providing the full list of information the attacker was attempting to gather.



notes: |
  - Designed to knock out all those whoami, netstat and other associated enumeration alerts that have piled up.
