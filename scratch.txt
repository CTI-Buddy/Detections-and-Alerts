// Combined Data Exfiltration Detection - Staging, Compression, and Cloud Transfer
// Detects the full attack chain: Archive creation -> Cloud tool usage -> Data transfer

// Parameters
let LookbackWindow = 4h;
let CorrelationWindow = 60m;  // Time window to correlate archive + upload
let BaselineWindow = 14d;
let LargeArchiveThreshold = 100MB;
let LargeTransferThreshold = 50MB;
let Window = toduration(CorrelationWindow);

// Known cloud storage tools and their indicators
let CloudStorageTools = dynamic([
    // Rclone variants
    "rclone.exe", "rclone64.exe", "rclone32.exe",
    // Azure Storage
    "storageexplorer.exe", "azurestorageexplorer.exe", "azcopy.exe",
    // MEGA
    "megasync.exe", "megacmd.exe", "megatools.exe",
    // Other cloud sync
    "winscp.exe", "filezilla.exe", "cyberduck.exe",
    // Command line tools
    "curl.exe", "wget.exe", "powershell.exe"
]);

let CloudStorageDomains = dynamic([
    // Major cloud storage providers
    "rclone.org", "mega.nz", "mega.io", "megasync.net",
    "dropbox.com", "box.com", "onedrive.live.com", 
    "drive.google.com", "s3.amazonaws.com", "blob.core.windows.net",
    "backblaze.com", "wasabi.com", "digitalocean.com",
    // Personal/free storage
    "mediafire.com", "4shared.com", "filemail.com", "wetransfer.com",
    "sendspace.com", "zippyshare.com"
]);

// Archive/compression tools
let ArchiveTools = dynamic([
    "7z.exe", "7za.exe", "7zg.exe", "7zfm.exe",
    "winrar.exe", "rar.exe", "unrar.exe",
    "zip.exe", "gzip.exe", "tar.exe",
    "powershell.exe", "cmd.exe"  // Can create archives
]);

let ArchiveExtensions = dynamic([
    ".7z", ".zip", ".rar", ".tar", ".gz", ".bz2", 
    ".xz", ".tar.gz", ".tgz", ".tar.bz2"
]);

// Suspicious staging locations
let StagingLocations = dynamic([
    "\\temp\\", "\\tmp\\", "\\public\\", "\\users\\public\\",
    "\\programdata\\", "\\windows\\temp\\", "\\appdata\\local\\temp\\",
    "c:\\temp\\", "c:\\tmp\\", "c:\\users\\public\\"
]);

// Legitimate backup/enterprise tools (for exclusions)
let LegitimateBackupTools = dynamic([
    "veeam", "commvault", "backup", "acronis", "veritas",
    "windows backup", "system restore", "windows server backup"
]);

// Module 1: Cloud Storage Tool Activity
let CloudToolActivity = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName in~ (CloudStorageTools)
    or ProcessCommandLine has_any (CloudStorageTools)
    or ProcessCommandLine has_any ("rclone", "azcopy", "megasync")
| extend
    IsRclone = FileName =~ "rclone.exe" or ProcessCommandLine contains "rclone",
    IsAzureStorage = FileName contains "storage" or ProcessCommandLine contains "azcopy",
    IsMega = FileName contains "mega" or ProcessCommandLine contains "mega",
    HasConfigFlag = ProcessCommandLine has_any ("--config", "config", "/config"),
    HasSyncFlag = ProcessCommandLine has_any ("sync", "copy", "move", "upload"),
    IsFromUnusualPath = not(FolderPath has_any ("\\program files\\", "\\program files (x86)\\"))
| project TimeGenerated, DeviceName, DeviceId, 
          ToolFileName = FileName, ToolCommandLine = ProcessCommandLine,
          ToolFolderPath = FolderPath, ToolAccountName = InitiatingProcessAccountName,
          IsRclone, IsAzureStorage, IsMega, HasConfigFlag, HasSyncFlag, IsFromUnusualPath;

// Module 2: Archive Creation Activity  
let ArchiveActivity = DeviceFileEvents
| where TimeGenerated >= ago(LookbackWindow)
| where ActionType == "FileCreated"
| where FileName endswith_cs ".7z" or FileName endswith_cs ".zip" or FileName endswith_cs ".rar"
    or FileName endswith_cs ".tar" or FileName endswith_cs ".tar.gz" or FileName endswith_cs ".tgz"
| extend
    FileSize = tolong(FileSize),
    FileSizeMB = tolong(FileSize) / 1048576,
    IsLargeArchive = tolong(FileSize) > (LargeArchiveThreshold * 1048576),
    IsInStagingLocation = FolderPath has_any (StagingLocations),
    IsInUserProfile = FolderPath contains "\\users\\" and not(FolderPath contains "\\appdata\\"),
    FileExtension = tolower(extract(@"(\.[^.]+)$", 1, FileName))
| where FileSizeMB > 10  // Filter small archives (likely legitimate)
| project TimeGenerated, DeviceName, DeviceId,
          ArchiveFileName = FileName, ArchivePath = FolderPath,
          FileSizeMB, IsLargeArchive, IsInStagingLocation, IsInUserProfile,
          ArchiveCreator = InitiatingProcessAccountName, FileExtension;

// Module 3: Archive Tool Execution (for context)
let ArchiveToolExecution = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName in~ (ArchiveTools)
    or ProcessCommandLine has_any (ArchiveTools)
| where ProcessCommandLine has_any ("a ", "archive", "compress", "-r", "/r") // Archive creation flags
| extend
    Is7Zip = FileName contains "7z",
    IsWinRAR = FileName contains "rar",
    IsRecursive = ProcessCommandLine has_any ("-r", "/r", "--recursive"),
    HasPasswordFlag = ProcessCommandLine has_any ("-p", "/p", "--password"),
    TargetPath = extract(@"(?:a|archive)\s+(?:""([^""]+)""|(\S+))", 1, ProcessCommandLine)
| project TimeGenerated, DeviceName, DeviceId,
          ArchiveToolName = FileName, ArchiveToolCommand = ProcessCommandLine,
          Is7Zip, IsWinRAR, IsRecursive, HasPasswordFlag, TargetPath,
          ToolAccountName = InitiatingProcessAccountName;

// Module 4: Network Connections to Cloud Storage
let CloudNetworkActivity = DeviceNetworkEvents
| where TimeGenerated >= ago(LookbackWindow)
| where ActionType == "ConnectionSuccess"
| where RemoteUrl has_any (CloudStorageDomains)
    or RemoteIPType == "Public" and RemotePort in (443, 80, 21, 22, 990, 989)
| extend
    IsKnownCloudDomain = RemoteUrl has_any (CloudStorageDomains),
    BytesSentMB = tolong(SentBytes) / 1048576,
    IsLargeTransfer = tolong(SentBytes) > (LargeTransferThreshold * 1048576)
| where BytesSentMB > 1  // Filter noise
| project TimeGenerated, DeviceName, DeviceId,
          InitiatingProcessFileName, RemoteUrl, RemoteIP, RemotePort,
          BytesSentMB, IsLargeTransfer, IsKnownCloudDomain,
          NetworkAccountName = InitiatingProcessAccountName;

// Correlation Logic: Combine all indicators

// Correlation 1: Archive creation followed by cloud tool activity
let Archive_Then_CloudTool = ArchiveActivity
| join kind=inner (CloudToolActivity) on DeviceName, DeviceId
| where CloudToolActivity.TimeGenerated between (ArchiveActivity.TimeGenerated .. (ArchiveActivity.TimeGenerated + Window))
| extend 
    Signal = "Archive_Then_CloudTool",
    TimeDelta = datetime_diff('minute', CloudToolActivity.TimeGenerated, ArchiveActivity.TimeGenerated),
    Evidence = pack(
        "ArchiveFile", ArchiveFileName,
        "ArchiveSizeMB", FileSizeMB,
        "CloudTool", ToolFileName,
        "TimeBetween", TimeDelta
    );

// Correlation 2: Archive creation followed by large network transfer
let Archive_Then_Transfer = ArchiveActivity
| join kind=inner (CloudNetworkActivity) on DeviceName, DeviceId
| where CloudNetworkActivity.TimeGenerated between (ArchiveActivity.TimeGenerated .. (ArchiveActivity.TimeGenerated + Window))
| extend
    Signal = "Archive_Then_Transfer",
    TimeDelta = datetime_diff('minute', CloudNetworkActivity.TimeGenerated, ArchiveActivity.TimeGenerated),
    Evidence = pack(
        "ArchiveFile", ArchiveFileName,
        "ArchiveSizeMB", FileSizeMB,
        "TransferDestination", RemoteUrl,
        "TransferSizeMB", BytesSentMB,
        "TimeBetween", TimeDelta
    );

// Correlation 3: Cloud tool activity with large transfers
let CloudTool_With_Transfer = CloudToolActivity
| join kind=inner (CloudNetworkActivity) on DeviceName, DeviceId
| where abs(datetime_diff('minute', CloudNetworkActivity.TimeGenerated, CloudToolActivity.TimeGenerated)) <= 5
| extend
    Signal = "CloudTool_With_Transfer",
    Evidence = pack(
        "CloudTool", ToolFileName,
        "Destination", RemoteUrl,
        "TransferSizeMB", BytesSentMB
    );

// Correlation 4: Archive tool execution followed by cloud activity
let ArchiveTool_Then_Cloud = ArchiveToolExecution
| join kind=inner (CloudToolActivity) on DeviceName, DeviceId  
| where CloudToolActivity.TimeGenerated between (ArchiveToolExecution.TimeGenerated .. (ArchiveToolExecution.TimeGenerated + Window))
| extend
    Signal = "ArchiveTool_Then_Cloud",
    TimeDelta = datetime_diff('minute', CloudToolActivity.TimeGenerated, ArchiveToolExecution.TimeGenerated),
    Evidence = pack(
        "ArchiveTool", ArchiveToolName,
        "CloudTool", ToolFileName,
        "TimeBetween", TimeDelta
    );

// Combine all correlations
let AllCorrelations = union isfuzzy=true 
    Archive_Then_CloudTool,
    Archive_Then_Transfer,
    CloudTool_With_Transfer,
    ArchiveTool_Then_Cloud
| extend
    User = coalesce(ArchiveCreator, ToolAccountName, NetworkAccountName),
    Device = DeviceName,
    SignalName = Signal;

// Score and aggregate by device/user
AllCorrelations
| summarize
    FirstSeen = min(TimeGenerated),
    LastSeen = max(TimeGenerated),
    Signals = make_list(pack(
        "Signal", SignalName,
        "Time", TimeGenerated,
        "Evidence", Evidence
    )),
    SignalCount = count(),
    UniqueSignals = dcount(SignalName),
    ArchiveSizes = make_list(FileSizeMB),
    CloudTools = make_set(ToolFileName),
    Destinations = make_set(RemoteUrl)
by Device, User
| extend
    // Calculate risk score
    BaseScore = case(
        UniqueSignals >= 3, 60,  // Multiple correlation types
        UniqueSignals == 2, 45,  // Two correlation types
        UniqueSignals == 1, 30,  // Single correlation type
        10
    ),
    
    // Bonus factors
    VolumeBonus = case(
        array_length(ArchiveSizes) > 0 and ArchiveSizes[0] > 500, 20,  // Very large archives
        array_length(ArchiveSizes) > 0 and ArchiveSizes[0] > 200, 10,  // Large archives
        0
    ),
    
    ToolBonus = case(
        array_length(CloudTools) > 1, 15,  // Multiple cloud tools
        CloudTools has "rclone", 10,        // Rclone specifically
        CloudTools has "azcopy", 10,        // Azure Storage tools
        5
    ),
    
    TotalRiskScore = BaseScore + VolumeBonus + ToolBonus

| extend
    AlertSeverity = case(
        TotalRiskScore >= 80, "Critical",
        TotalRiskScore >= 60, "High",
        TotalRiskScore >= 40, "Medium",
        "Low"
    ),
    
    ActivitySummary = pack(
        "SignalCount", SignalCount,
        "UniqueSignalTypes", UniqueSignals,
        "CloudTools", CloudTools,
        "Destinations", Destinations,
        "Duration", datetime_diff('minute', LastSeen, FirstSeen)
    ),
    
    Recommendations = case(
        AlertSeverity == "Critical",
        "IMMEDIATE: Isolate device, block cloud storage domains, analyze archives for sensitive data, revoke user credentials, check for lateral movement",
        AlertSeverity == "High",
        "URGENT: Investigate archive contents, validate cloud tool legitimacy, check user authorization for data access, review network logs for full transfer scope",
        AlertSeverity == "Medium",
        "INVESTIGATE: Verify business justification, confirm authorized backup/sync activity, review user data access patterns",
        "MONITOR: Document for baseline tuning"
    ),
    
    DetectedTechniques = "T1560.001 (Archive via Utility), T1567.002 (Exfiltration to Cloud Storage), T1041 (Exfiltration Over C2 Channel)"

| where AlertSeverity in ("Critical", "High", "Medium")
| project
    TimeGenerated = LastSeen,
    DeviceName = Device,
    UserPrincipalName = User,
    AlertSeverity,
    TotalRiskScore,
    ActivityWindowMinutes = datetime_diff('minute', LastSeen, FirstSeen),
    SignalCount,
    UniqueSignalTypes = UniqueSignals,
    CloudToolsUsed = CloudTools,
    ExfiltrationDestinations = Destinations,
    Signals,
    ActivitySummary,
    DetectedTechniques,
    Recommendations
| sort by TotalRiskScore desc, TimeGenerated d
