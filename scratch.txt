# DE-HY25.16 Kerberoasting Attack Detection
id: DE-HY25.16
title: Kerberoasting Attack Detection
description: |
  Detects a high-volume, rapid pattern of successful Kerberos Service Ticket requests (TGS), 
  often using weak RC4 encryption, for multiple Service Principal Names (SPNs).
severity: High
status: draft
author: \m/
date_created: 2025-10-27
date_modified: 2025-10-27
tags:
  - clarifi_path: Endpoint/Windows/Credential_Access
  - tactic: Credential Access
  - technique: Steal or Forge Kerberos Tickets: Kerberoasting
  - ATT&CK_ID: T1558.003 # Steal or Forge Kerberos Tickets: Kerberoasting
  - method: Threshold/Count-Limit
  - method: Statistical/Baseline-Comparison
  - core_indicator: Event_AccountAnomaly
  - core_indicator: Vol_RequestSpike
  - core_indicator: Event_KRB_Event_ID 
  - datasource: SecurityEvent

logic:
  query: |

// Kerberoasting Attack Detection
// Detects mass service ticket (TGS) requests for offline password cracking

// Parameters
let DetectionWindow = 1h;        // Analysis window for volume detection
let BaselineWindow = 30d;        // Historical baseline period
let MinTickets = 10;             // Minimum unique SPNs for alert
let MinTicketsForCritical = 20;  // Critical severity threshold
let RC4_Encryption = "0x17";     // RC4-HMAC (weak, preferred by attackers)

// Known legitimate high-volume SPN requesters (customize for your environment)
let WhitelistedAccounts = dynamic([
    "svc_monitor", "svc_scanner", "nagios", "solarwinds",
    "SCCM_Server$", "monitoring_agent"
]);

// High-value/privileged SPN patterns (these are prime targets)
let HighValueSPNPatterns = dynamic([
    "MSSQLSvc", "HTTP", "HOST", "WSMAN", "TERMSRV", 
    "RestrictedKrbHost", "LDAP", "DNS", "CIFS"
]);

// Get baseline of normal SPN request patterns
let KerberoastingBaseline = 
    SecurityEvent
    | where TimeGenerated between (ago(BaselineWindow) .. ago(DetectionWindow))
    | where EventID == 4769  // Kerberos Service Ticket granted
    | where Status == "0x0"  // Successful requests only
    | summarize 
        BaselineSPNCount = dcount(ServiceName),
        BaselineAvgPerHour = count() / (BaselineWindow / 1h),
        BaselineRequesters = make_set(Account)
    by Account;

// Main Detection: Service Ticket Request Analysis
let ServiceTicketRequests = SecurityEvent
| where TimeGenerated >= ago(DetectionWindow)
| where EventID == 4769  // Kerberos Service Ticket was granted
| where Status == "0x0"  // Only successful ticket grants
| extend
    // Correct field mappings for Event ID 4769
    ClientAccount = Account,                    // Requesting account
    ServiceName = ServiceName,                  // The SPN being requested
    ServiceAccount = TargetUserName,            // Account that owns the SPN
    TicketEncryptionType = TicketEncryptionType, // Encryption used
    ClientIP = IpAddress,
    DomainController = Computer,
    TicketOptions = TicketOptions,
    Status = Status
// Filter out known good accounts
| where ClientAccount !in~ (WhitelistedAccounts)
| where ClientAccount !in ("ANONYMOUS LOGON", "GUEST", "")
// Key Kerberoasting indicator: RC4 encryption (weak, crackable)
| extend
    IsRC4Encryption = TicketEncryptionType =~ RC4_Encryption,
    IsHighValueSPN = ServiceName has_any (HighValueSPNPatterns),
    IsComputerAccount = ClientAccount endswith "$",
    IsServiceAccount = ClientAccount startswith "svc" or ClientAccount startswith "svc_"
| project TimeGenerated, ClientAccount, ServiceName, ServiceAccount, 
          TicketEncryptionType, IsRC4Encryption, IsHighValueSPN, 
          ClientIP, DomainController, IsComputerAccount, IsServiceAccount;

// Aggregate by client account to detect volume anomalies
let KerberoastingActivity = ServiceTicketRequests
| summarize
    // Core metrics
    UniqueSPNs = dcount(ServiceName),
    UniqueServiceAccounts = dcount(ServiceAccount),
    TotalRequests = count(),
    FirstRequest = min(TimeGenerated),
    LastRequest = max(TimeGenerated),
    // Collections for evidence
    SPNsRequested = make_set(ServiceName, 50),
    ServiceAccountsTargeted = make_set(ServiceAccount, 50),
    SourceIPs = make_set(ClientIP),
    DomainControllers = make_set(DomainController),
    // Risk indicators
    RC4RequestCount = countif(IsRC4Encryption),
    HighValueSPNCount = countif(IsHighValueSPN),
    RC4Percentage = round(100.0 * countif(IsRC4Encryption) / count(), 1),
    HighValuePercentage = round(100.0 * countif(IsHighValueSPN) / count(), 1)
by ClientAccount, IsComputerAccount, IsServiceAccount
| where UniqueSPNs >= MinTickets  // Volume threshold
| extend
    ActivityDuration = datetime_diff('second', LastRequest, FirstRequest),
    RequestRate = round(todouble(TotalRequests) / (datetime_diff('minute', LastRequest, FirstRequest) + 1), 2);

// Join with baseline for anomaly detection
KerberoastingActivity
| join kind=leftouter (KerberoastingBaseline) on $left.ClientAccount == $right.Account
| extend
    IsNewRequester = isnull(BaselineSPNCount) or BaselineSPNCount < 3,
    VolumeAnomaly = iif(BaselineSPNCount > 0, 
        todouble(UniqueSPNs) / BaselineSPNCount, 
        todouble(UniqueSPNs)),
    IsAnomalousVolume = VolumeAnomaly > 5.0 or IsNewRequester

// Enhanced Risk Scoring
| extend
    // Base volume risk
    VolumeRisk = case(
        UniqueSPNs >= MinTicketsForCritical, 40,  // 20+ SPNs
        UniqueSPNs >= 15, 30,                     // 15-19 SPNs
        UniqueSPNs >= MinTickets, 20,             // 10-14 SPNs
        10
    ),
    
    // Encryption risk (RC4 is highly suspicious)
    EncryptionRisk = case(
        RC4Percentage >= 80, 30,      // Mostly RC4 (classic Kerberoasting)
        RC4Percentage >= 50, 20,      // Half RC4
        RC4RequestCount > 0, 10,      // Some RC4
        0
    ),
    
    // Target value risk
    TargetRisk = case(
        HighValuePercentage >= 50, 15,  // Targeting high-value SPNs
        HighValueSPNCount >= 5, 10,     // Multiple high-value targets
        HighValueSPNCount > 0, 5,       // Some high-value targets
        0
    ),
    
    // Speed/pattern risk
    BehaviorRisk = case(
        ActivityDuration <= 300 and UniqueSPNs >= 15, 20,  // Very fast, high volume
        ActivityDuration <= 600 and UniqueSPNs >= 10, 15,  // Fast enumeration
        RequestRate > 10, 10,                               // High request rate
        array_length(SourceIPs) > 1, 10,                   // Multiple source IPs
        5
    ),
    
    // Anomaly risk
    AnomalyRisk = case(
        IsNewRequester and UniqueSPNs >= 15, 15,  // New requester, high volume
        VolumeAnomaly > 10, 15,                   // 10x baseline
        VolumeAnomaly > 5, 10,                    // 5x baseline  
        IsNewRequester, 5,                        // First time requester
        0
    ),
    
    // Account type adjustments
    AccountTypeModifier = case(
        IsComputerAccount == false and IsServiceAccount == false, 10,  // User account (unusual)
        IsComputerAccount, 5,   // Computer account (compromised machine)
        0                       // Service account (could be legitimate or compromised)
    ),
    
    TotalRiskScore = VolumeRisk + EncryptionRisk + TargetRisk + BehaviorRisk + AnomalyRisk + AccountTypeModifier

| extend
    AlertSeverity = case(
        TotalRiskScore >= 85, "Critical",
        TotalRiskScore >= 70, "High",
        TotalRiskScore >= 50, "Medium",
        "Low"
    )

// Filter to actionable alerts
| where AlertSeverity in ("Critical", "High", "Medium")

| extend
    Evidence = pack(
        "UniqueSPNs", UniqueSPNs,
        "UniqueServiceAccounts", UniqueServiceAccounts,
        "TotalRequests", TotalRequests,
        "ActivityDuration", ActivityDuration,
        "RequestRate", RequestRate,
        "RC4Percentage", RC4Percentage,
        "HighValueSPNCount", HighValueSPNCount,
        "SPNsSample", array_slice(SPNsRequested, 0, 10),  // First 10 for readability
        "ServiceAccountsSample", array_slice(ServiceAccountsTargeted, 0, 10),
        "SourceIPs", SourceIPs,
        "VolumeAnomaly", VolumeAnomaly,
        "IsNewRequester", IsNewRequester
    ),
    
    ThreatContext = pack(
        "AttackType", "Kerberoasting",
        "AttackPhase", "Credential Access - Offline Password Cracking Preparation",
        "KeyIndicators", strcat_array(
            dynamic([
                iff(RC4Percentage >= 80, "High RC4 Usage", ""),
                iff(HighValueSPNCount >= 5, "High-Value Targets", ""),
                iff(ActivityDuration <= 600, "Rapid Enumeration", ""),
                iff(IsNewRequester, "New Requester", ""),
                iff(VolumeAnomaly > 5, "Volume Anomaly", "")
            ]) | where strlen(tostring($0)) > 0,
            ", "
        ),
        "RiskBreakdown", pack(
            "VolumeRisk", VolumeRisk,
            "EncryptionRisk", EncryptionRisk,
            "TargetRisk", TargetRisk,
            "BehaviorRisk", BehaviorRisk,
            "AnomalyRisk", AnomalyRisk
        )
    ),
    
    Recommendations = case(
        AlertSeverity == "Critical",
        "IMMEDIATE P0: 1) Disable ClientAccount 2) Force password reset for ALL targeted service accounts (25+ char, complex) 3) Review authentication logs for credential reuse 4) Hunt for lateral movement 5) Check for AS-REP roasting and other Kerberos attacks 6) Consider implementing AES encryption for all SPNs",
        AlertSeverity == "High",
        "URGENT: 1) Validate ClientAccount activity authorization 2) If unauthorized, disable account 3) Reset passwords for high-value service accounts 4) Review SPN configurations 5) Check for weak encryption types 6) Monitor for offline cracking attempts",
        "INVESTIGATE: 1) Confirm legitimate security scanning or monitoring 2) Validate service account necessity 3) Review SPN request patterns 4) Consider implementing honeypot SPNs"
    ),
    
    DetectedTechniques = "T1558.003 (Steal or Forge Kerberos Tickets: Kerberoasting), T1558 (Steal or Forge Kerberos Tickets)"

// Additional context for response
| extend
    RemediationSteps = pack(
        "ImmediateActions", dynamic([
            "Disable attacking account",
            "Reset passwords for all targeted service accounts",
            "Force minimum 25-character passwords with complexity"
        ]),
        "ForensicActions", dynamic([
            "Review Kerberos ticket requests (Event IDs 4768, 4769, 4770, 4771)",
            "Check for TGT requests (AS-REP roasting - Event ID 4768 with PreAuth = No)",
            "Hunt for password spray attempts",
            "Review failed authentication events for offline cracking validation"
        ]),
        "PreventionActions", dynamic([
            "Implement AES encryption for all SPNs (disable RC4)",
            "Deploy honeypot service accounts with alerts",
            "Enforce strong service account passwords (25+ characters)",
            "Reduce number of accounts with SPNs",
            "Implement privileged access management (PAM) for service accounts",
            "Enable Advanced Threat Analytics or Azure ATP"
        ])
    )

| project
    TimeGenerated = LastRequest,
    AlertSeverity,
    TotalRiskScore,
    ClientAccount,
    AccountType = case(
        IsComputerAccount, "Computer Account",
        IsServiceAccount, "Service Account",
        "User Account"
    ),
    UniqueSPNs,
    UniqueServiceAccounts,
    TotalRequests,
    ActivityDurationSeconds = ActivityDuration,
    RC4Percentage,
    HighValueSPNCount,
    ThreatContext,
    Evidence,
    DetectedTechniques,
    Recommendations,
    RemediationSteps

| sort by TotalRiskScore desc, TimeGenerated desc

references:
  - https://attack.mitre.org/techniques/T1558/003/
  - https://cloud.google.com/blog/topics/threat-intelligence/unc2165-shifts-to-evade-sanctions/
  - https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-190a
  - https://www.microsoft.com/en-us/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/
  - https://thedfirreport.com/2020/11/05/ryuk-speed-run-2-hours-to-ransom/

triage: |
  This alert means an attacker has successfully harvested credentials for offline password cracking, which can lead to rapid lateral movement.
    1. Immediate Attacker Account Containment
      •	Disable/Isolate Account: Immediately disable or force a high-complexity password reset for the ClientAccount (the attacking source account) to halt the enumeration attack.
      •	Review Source: If available in the Evidence, check the source SourceIPs for malware or further malicious activity; this is the device where the attacker has a foothold.
    2. Targeted Service Account Remediation (Highest Priority)
      •	Identify Targets: Retrieve the full list of Service Accounts (ServiceAccountsTargeted) and prioritize the accounts matching the HighValueSPNCount.
      •	Force Password Reset (CRITICAL): Immediately force a password reset for all targeted service accounts. Crucially, enforce a minimum length of 25 characters and complexity for these accounts to make offline cracking infeasible.
      •	Review Encryption: Review the Kerberos properties for the targeted SPNs. If the RC4Percentage is high, work with Identity/Domain Admins to enforce AES encryption for the affected SPNs to prevent future Kerberoasting.
    3. Domain and Network Scoping
      •	Check for Lateral Movement: Search authentication logs for the targeted Service Accounts (those just reset) for any logon attempts occurring after the Kerberoasting alert. This checks if the attacker has already cracked and reused the passwords.
      •	Hunt for Parallel Attacks: Check the Domain Controller logs for related Kerberos events from the ClientAccount, such as:
        o	AS-REP Roasting: Check for Event ID 4768 (TGT Request) where Pre-Authentication is not used on non-user accounts.
        o	Ticket Injection: Hunt for the attacker importing their own tickets (Event ID 4624 with suspicious Logon Type).
    4. Escalation
      •	Escalate: Confirm the incident as a breach involving T1558.003 (Kerberoasting) and coordinate with the Identity/Domain teams to ensure all targeted accounts are secured and long-term Kerberos protection is enforced.

notes: |
  - check
