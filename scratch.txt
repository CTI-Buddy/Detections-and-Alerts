let Minimum_Users = 10;
// Step 1: Find suspicious apps
let SuspiciousApps = OAuthAppInfo
| where AppStatus == "Enabled"
| where AppOrigin == "External"
| where ConsentedUsersCount > 0 and ConsentedUsersCount < Minimum_Users
| where IsAdminConsented == 0
| mv-expand Permissions
| extend HighRiskPermission = iif(Permissions has_any ("Mail.ReadWrite","Mail.ReadWrite.All","Files.ReadWrite.All","User.ReadWrite.All","offline_access"), 1, 0)
| summarize Permissions = make_set(Permissions), HighRisk = max(HighRiskPermission) by AppId, AppDisplayName, ConsentedUsersCount
| where HighRisk == 1;   // Step 2: only apps with sensitive perms

// Step 3: Correlate with sign-ins to those apps
SigninLogs
| where AppId in (SuspiciousApps)
| summarize Logins = count(), Users = make_set(UserPrincipalName), IPs = make_set(IPAddress) by AppId, AppDisplayName
| join kind=inner SuspiciousApps on AppId
| project
    TimeWindow = ago(24h),
    AppId,
    AppDisplayName,
    ConsentedUsersCount,
    Permissions,
    Users,
    IPs,
    Logins
| order by Logins desc




name: Suspicious External OAuth App with User Activity and Sensitive Permissions
id: aad_suspicious_oauth_app_correlation
description: |
  Detects external OAuth applications that have been consented to by a small number of users, 
  request sensitive permissions, and are subsequently used in sign-ins. This correlation aims 
  to identify malicious apps leveraging OAuth abuse techniques for persistence and data access.
author: detection-team
severity: High
status: Experimental
tactics:
  - Persistence
  - Credential Access
  - Collection
techniques:
  - T1136.003  # Create Account: Cloud Account
  - T1528      # Steal Application Access Token
  - T1550.001  # Use of Application Access Tokens
  - T1098.005  # Account Manipulation: Additional Cloud Credentials
query: |
  let Minimum_Users = 10;
  let SuspiciousApps = 
      OAuthAppInfo
      | where AppStatus == "Enabled"
      | where AppOrigin == "External"
      | where ConsentedUsersCount > 0 and ConsentedUsersCount < Minimum_Users
      | where IsAdminConsented == 0
      | mv-expand Permissions
      | where tostring(Permissions) has_any ("Mail.Read", "Mail.Send", "Mail.ReadWrite", "Files.ReadWrite", "offline_access")
      | project AppId, AppName, Permissions, ConsentedUsersCount, AddedDateTime;
  let AppSignIns = 
      SigninLogs
      | where AppId in (SuspiciousApps)
      | where ResultType == 0
      | project AppId, UserPrincipalName, IPAddress, ResourceDisplayName, TimeGenerated;
  SuspiciousApps
  | join kind=inner (AppSignIns) on AppId
  | project TimeGenerated, AppId, AppName, UserPrincipalName, IPAddress, ResourceDisplayName, Permissions, ConsentedUsersCount, AddedDateTime
time_window: 1d
frequency: 1h
trigger: > 
  0
entities:
  - AppId
  - UserPrincipalName
  - IPAddress
fields_returned:
  - TimeGenerated
  - AppId
  - AppName
  - UserPrincipalName
  - IPAddress
  - ResourceDisplayName
  - Permissions
  - ConsentedUsersCount
  - AddedDateTime
