# DE-HY25.10 Credential Access: LSASS Memory Dumping Detection
id: DE-HY25.10
title: Credential Access: LSASS Memory Dumping Detection
description: |
  Detects credential access attempts against the LSASS process memory, including known tools, 
  command line targeting, and the creation of memory dump artifacts.
severity: High
status: draft
author: \m/
date_created: 2025-10-17
date_modified: 2025-10-17
tags:
  - clarifi_path: Windows/Endpoint/Credential_Access
  - tactic: Credential Access
  - technique: OS Credential Dumping: LSASS Memory
  - ATT&CK_ID: T1003.001 # OS Credential Dumping: LSASS Memory
  - method: Correlation/Multi-Event
  - method: Signature/String-Match
  - core_indicator: Cmd_DumpTool
  - core_indicator: File_MemoryDump
  - core_indicator: Event_LSASS
  - datasource: DeviceProcessEvents
  - datasource: DeviceEvents
  - datasource: DeviceFileEvents

logic:
  query: |

// Credential Access: LSASS Memory Dumping Detection
// Optimized for Microsoft Defender for Endpoint / Microsoft Sentinel

// Configuration
let LookbackWindow = 2h;
let CorrelationWindow = 30s;

// Known attack tools
let LSASS_DumpTools = dynamic([
    "mimikatz.exe", "lazagne.exe", "procdump.exe", "procdump64.exe", 
    "dumpit.exe", "out-minidump.exe", "comsvcs.dll", "nanodump.exe",
    "hashcat.exe", "fgdump.exe", "pwdump.exe", "gsecdump.exe"
]);

// Legitimate processes that may access LSASS
let LegitimateProcesses = dynamic([
    "MsMpEng.exe", "SenseIR.exe", "SenseCncProxy.exe", 
    "HealthService.exe", "csrss.exe", "smss.exe",
    "Microsoft.Identity.AadConnect.Health.AadSync.Host.exe"
]);

// Common memory dump extensions
let DumpFileExtensions = dynamic([".dmp", ".bin", ".log", ".mem", ".tmp", ".mdmp", ".hdmp"]);

// --- Module 1: LSASS Process Access Detection ---
let LSASS_Access = DeviceEvents
| where TimeGenerated >= ago(LookbackWindow)
| where ActionType == "ProcessAccess"
| where isnotempty(FileName)
| extend
    TargetProcess = tostring(AdditionalFields.TargetFileName),
    TargetProcessId = tostring(AdditionalFields.TargetProcessId),
    AccessMask = tostring(AdditionalFields.AccessMask)
| where TargetProcess =~ "lsass.exe"
| extend
    // Enhanced access mask detection for MDE
    IsHighRiskAccess = AccessMask has_any (
        "0x1010", "0x1410", "0x1438", "0x1400",
        "0x1fffff", "0x1f0fff", "0x001FFFFF"
    )
| where IsHighRiskAccess
| extend
    AttackerProcess = FileName,
    AttackerProcessId = ProcessId,
    AttackerProcessCommandLine = ProcessCommandLine,
    AttackerAccount = AccountName,
    AttackerParentProcess = InitiatingProcessFileName,
    AttackerParentCommandLine = InitiatingProcessCommandLine
// Filter out known legitimate processes
| where AttackerProcess !in~ (LegitimateProcesses)
| extend
    IsTaskManager = AttackerProcess =~ "taskmgr.exe",
    IsLOLBin = AttackerProcess in~ ("cmd.exe", "powershell.exe", "rundll32.exe", "wscript.exe", "cscript.exe"),
    LSASSAccessTime = TimeGenerated,
    CorrelationKey = strcat(DeviceName, "_", AttackerProcessId)
| project TimeGenerated, DeviceName, AttackerProcess, AttackerProcessCommandLine, AttackerAccount,
          AttackerProcessId, AttackerParentProcess, TargetProcessId, AccessMask, IsTaskManager, IsLOLBin,
          LSASSAccessTime, CorrelationKey, DeviceCorrelationKey = DeviceName;

// --- Module 2: Credential Dumping Tool Execution ---
let Tool_Execution = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where FileName has_any (LSASS_DumpTools) 
    or ProcessCommandLine has_any ("sekurlsa", "logonpasswords", "lsadump", "-ma lsass")
| extend
    IsKnownTool = true,
    AttackerAccount = AccountName,
    AttackerParentProcess = InitiatingProcessFileName
| project TimeGenerated, DeviceName, AttackerProcess = FileName, 
          AttackerProcessCommandLine = ProcessCommandLine, AttackerAccount,
          AttackerParentProcess, IsKnownTool, CorrelationKey = DeviceName;

// --- Module 3: CommandLine-Based LSASS Targeting ---
let CommandLine_Targeting = DeviceProcessEvents
| where TimeGenerated >= ago(LookbackWindow)
| where ProcessCommandLine has_any ("lsass.exe", "lsass.dmp", "-ma lsass", "comsvcs.dll", "MiniDump")
    and ProcessCommandLine !has "Get-Process lsass"  // Exclude benign queries
| extend
    AttackerAccount = AccountName,
    AttackerParentProcess = InitiatingProcessFileName,
    IsCOMSvcsDump = ProcessCommandLine has "comsvcs.dll" and ProcessCommandLine has "lsass"
| project TimeGenerated, DeviceName, AttackerProcess = FileName, 
          AttackerProcessCommandLine = ProcessCommandLine, AttackerAccount,
          AttackerParentProcess, IsCOMSvcsDump, CorrelationKey = DeviceName;

// --- Module 4: Suspicious Memory Dump File Creation ---
let Dump_File_Creation = DeviceFileEvents
| where TimeGenerated >= ago(LookbackWindow)
| where ActionType in ("FileCreated", "FileModified")
| where isnotempty(FileName)
| where (FileName has_any (DumpFileExtensions) and FileSize > 1000000)
    or (FileName contains "lsass" and FileSize > 500000)
    or (FolderPath has_any ("\\Temp\\", "\\AppData\\", "\\ProgramData\\", "\\Public\\") and FileSize > 40000000)
| extend
    IsMemoryDump = true,
    DumpFileName = FileName,
    DumpFilePath = FolderPath,
    FileCreator = InitiatingProcessFileName,
    FileCreatorCommandLine = InitiatingProcessCommandLine,
    DumpFileCreationTime = TimeGenerated,
    IsSuspiciousLocation = FolderPath has_any ("\\Temp\\", "\\AppData\\", "\\Public\\"),
    HasLSASSInName = FileName contains "lsass",
    CorrelationKey = DeviceName
| project TimeGenerated, DeviceName, DumpFileName, DumpFilePath, FileCreator, FileCreatorCommandLine,
          FileSize, DumpFileCreationTime, IsSuspiciousLocation, HasLSASSInName, CorrelationKey;

// --- Correlation Layer ---
// High-fidelity: LSASS Access + Dump File
let Correlated_Access_Dump = LSASS_Access
| join kind=inner (Dump_File_Creation) on DeviceCorrelationKey
| where DumpFileCreationTime between (LSASSAccessTime .. (LSASSAccessTime + CorrelationWindow))
| extend
    Signal = "LSASS_Access_with_Dump_File",
    TimeDelta = datetime_diff('second', DumpFileCreationTime, LSASSAccessTime)
| project TimeGenerated = DumpFileCreationTime, DeviceName, AttackerProcess, AttackerProcessCommandLine,
          AttackerAccount, AttackerParentProcess, AttackerProcessId, DumpFileName, DumpFilePath, 
          FileCreator, FileSize, TimeDelta, Signal, IsTaskManager, IsLOLBin, 
          IsSuspiciousLocation, HasLSASSInName;

// Standalone LSASS Access (no correlated dump file)
let Standalone_Access = LSASS_Access
| join kind=leftanti (Dump_File_Creation) on DeviceCorrelationKey
| extend Signal = "LSASS_Access_Only"
| project TimeGenerated, DeviceName, AttackerProcess, AttackerProcessCommandLine,
          AttackerAccount, AttackerParentProcess, Signal, IsTaskManager, IsLOLBin,
          DumpFileName = "", DumpFilePath = "", FileCreator = "", FileSize = long(null),
          IsSuspiciousLocation = false, HasLSASSInName = false;

// --- Consolidate All Detections ---
let AllDetections = union
    (Correlated_Access_Dump),
    (Standalone_Access),
    (Tool_Execution | extend Signal = "Known_Dump_Tool_Executed"),
    (CommandLine_Targeting | extend Signal = "LSASS_CommandLine_Targeting")
| extend
    // Ensure all fields exist for scoring
    IsTaskManager = coalesce(IsTaskManager, false),
    IsLOLBin = coalesce(IsLOLBin, false),
    IsSuspiciousLocation = coalesce(IsSuspiciousLocation, false),
    HasLSASSInName = coalesce(HasLSASSInName, false),
    IsCOMSvcsDump = coalesce(IsCOMSvcsDump, false),
    IsKnownTool = coalesce(IsKnownTool, false);

// --- Risk Scoring and Prioritization ---
AllDetections
| extend
    BaseRisk = case(
        Signal == "LSASS_Access_with_Dump_File", 90,
        Signal == "Known_Dump_Tool_Executed", 85,
        Signal == "LSASS_CommandLine_Targeting" and IsCOMSvcsDump, 80,
        Signal == "LSASS_CommandLine_Targeting", 70,
        Signal == "LSASS_Access_Only" and IsLOLBin, 65,
        Signal == "LSASS_Access_Only", 55,
        50
    ),
    RiskBonus = 
        iff(IsLOLBin, 10, 0)
        + iff(IsSuspiciousLocation, 10, 0)
        + iff(HasLSASSInName, 10, 0)
        + iff(AttackerAccount endswith "$", -15, 0)  // System account reduction
        + iff(IsTaskManager, -30, 0)  // Task Manager gets lower score
        + iff(IsCOMSvcsDump, 15, 0)
        + iff(IsKnownTool, 15, 0)
        + iff(AttackerParentProcess in~ ("winword.exe", "excel.exe", "outlook.exe", "chrome.exe"), 20, 0),
    TotalRiskScore = BaseRisk + RiskBonus
| extend
    AlertSeverity = case(
        TotalRiskScore >= 85, "Critical",
        TotalRiskScore >= 70, "High",
        TotalRiskScore >= 55, "Medium",
        "Low"
    )
| where AlertSeverity in ("Critical", "High", "Medium")
| extend
    Evidence = bag_pack(
        "Signal", Signal,
        "ProcessDetails", AttackerProcess,
        "CommandLine", AttackerProcessCommandLine,
        "ParentProcess", AttackerParentProcess,
        "DumpFile", DumpFileName,
        "DumpPath", DumpFilePath,
        "FileSize", FileSize,
        "IsLOLBin", IsLOLBin,
        "IsSuspiciousLocation", IsSuspiciousLocation
    ),
    DetectedTechniques = "T1003.001 (OS Credential Dumping: LSASS Memory)",
    RecommendedActions = case(
        AlertSeverity == "Critical", "IMMEDIATE: Isolate device, reset credentials, investigate lateral movement",
        AlertSeverity == "High", "Validate activity, check for credential theft indicators, review authentication logs",
        "Review context and verify legitimacy"
    )
| project
    TimeGenerated,
    AlertSeverity,
    TotalRiskScore,
    DeviceName,
    AccountName = AttackerAccount,
    AttackerProcess,
    AttackerProcessCommandLine,
    ParentProcess = AttackerParentProcess,
    DumpFileName,
    DumpFilePath,
    FileCreator,
    Signal,
    Evidence,
    DetectedTechniques,
    RecommendedActions
| sort by TotalRiskScore desc, TimeGenerated desc

time_window: 4h
frequency: 15m
trigger: results > 0

fields_returned:
  - TimeGenerated
  - AlertSeverity
  - TotalRiskScore
  - DeviceName
  - AttackerAccount
  - AttackerProcess
  - AttackerProcessCommandLine
  - AttackerParentProcess
  - DumpFileName
  - DumpFilePath
  - FileCreator
  - Signal
  - Evidence
  - DetectedTechniques
  - RecommendedActions

references:
  - https://attack.mitre.org/techniques/T1003/001/
  - https://github.com/Th1ru-M/Windows-Threat-Hunting/blob/master/Mimikatz%20Detection
  - https://www.microsoft.com/en-us/security/blog/2022/10/05/detecting-and-preventing-lsass-credential-dumping-attacks/
  - https://redcanary.com/threat-detection-report/techniques/lsass-memory/
  - https://www.deepinstinct.com/blog/lsass-memory-dumps-are-stealthier-than-ever-before
  - https://www.elastic.co/docs/reference/security/prebuilt-rules/rules/windows/credential_access_lsass_memdump_file_created
  = https://jumpcloud.com/it-index/what-is-an-lsass-memory-dump

triage: |
  This alert indicates that an attacker has attempted or succeeded in stealing credential material (NT hashes, Kerberos tickets) from the memory of the lsass.exe process.
    1.	Immediate Containment & Verification:
      o	Isolate Device: Immediately isolate the DeviceName to prevent the attacker from exfiltrating the credential dump file or using the newly acquired credentials for lateral movement.
      o	Verify Legitimacy: Review the AttackerProcess and AttackerProcessCommandLine. Check the AttackerAccount's activity. If the process is a known malicious tool or a highly suspicious LOLBin (e.g., PowerShell, rundll32.exe) and the user/system owner has no business reason for running it, proceed as a breach.
    2.	Artifact Discovery and Collection:
      o	Locate Dump File: Search the file system for the file path listed in DumpFilePath and DumpFileName. If found, collect the file for forensic analysis (to confirm contents and identify credential types) and then delete it from the endpoint.
      o	Check LSASS Handles: Use live response tools (like Process Explorer) to check if any other active processes are holding an open handle to the lsass.exe process, which could indicate a continued active reading attempt.
    3.	Compromised Credential Scoping:
      o	Reset Credentials: The credentials and access tokens of every user currently logged into the infected machine at the time of the event are considered compromised. Force a password reset for every administrative and service account that was active on the system.
      o	Review Session Logs: After containment, check the authentication and sign-in logs for the last 15-30 minutes for any suspicious logon attempts originating from the compromised host using any of the compromised accounts (a sign of immediate lateral movement).
    4.	Process and Parent Analysis:
      o	Parent Process: Investigate the ParentProcess (AttackerParentProcess). If it was a web browser, Office application, or an email client, this indicates the initial dropper/payload was delivered via phishing or a supply chain attack.
      o	Exfiltration Check: Check network activity logs for the compromised endpoint for any immediate outbound connections to external IPs (C2 servers) around the TimeGenerated, which suggests the attacker exfiltrated the dump file.



notes: |
  - This detection is inteded to kill off all those duplicative mimikatz detections.  

